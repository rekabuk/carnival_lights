

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Oct 21 17:45:15 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F630 Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   100                           PORTC equ 07h ;# 
   101  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   102                           PCLATH equ 0Ah ;# 
   103  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   104                           INTCON equ 0Bh ;# 
   105  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   106                           PIR1 equ 0Ch ;# 
   107  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   108                           TMR1 equ 0Eh ;# 
   109  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   110                           TMR1L equ 0Eh ;# 
   111  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   112                           TMR1H equ 0Fh ;# 
   113  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   114                           T1CON equ 010h ;# 
   115  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   116                           CMCON equ 019h ;# 
   117  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   118                           OPTION_REG equ 081h ;# 
   119  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   120                           TRISA equ 085h ;# 
   121  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   122                           TRISC equ 087h ;# 
   123  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   124                           PIE1 equ 08Ch ;# 
   125  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   126                           PCON equ 08Eh ;# 
   127  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   128                           OSCCAL equ 090h ;# 
   129  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   130                           WPUA equ 095h ;# 
   131  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   132                           WPU equ 095h ;# 
   133  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   134                           IOCA equ 096h ;# 
   135  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   136                           IOC equ 096h ;# 
   137  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   138                           VRCON equ 099h ;# 
   139  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   140                           EEDAT equ 09Ah ;# 
   141  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   142                           EEDATA equ 09Ah ;# 
   143  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   144                           EEADR equ 09Bh ;# 
   145  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   146                           EECON1 equ 09Ch ;# 
   147  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   148                           EECON2 equ 09Dh ;# 
   149  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   150                           INDF equ 00h ;# 
   151  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   152                           TMR0 equ 01h ;# 
   153  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   154                           PCL equ 02h ;# 
   155  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   156                           STATUS equ 03h ;# 
   157  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   158                           FSR equ 04h ;# 
   159  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   160                           PORTA equ 05h ;# 
   161  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   162                           PORTC equ 07h ;# 
   163  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   164                           PCLATH equ 0Ah ;# 
   165  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   166                           INTCON equ 0Bh ;# 
   167  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   168                           PIR1 equ 0Ch ;# 
   169  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   170                           TMR1 equ 0Eh ;# 
   171  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   172                           TMR1L equ 0Eh ;# 
   173  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   174                           TMR1H equ 0Fh ;# 
   175  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   176                           T1CON equ 010h ;# 
   177  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   178                           CMCON equ 019h ;# 
   179  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   180                           OPTION_REG equ 081h ;# 
   181  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   182                           TRISA equ 085h ;# 
   183  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   184                           TRISC equ 087h ;# 
   185  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   186                           PIE1 equ 08Ch ;# 
   187  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   188                           PCON equ 08Eh ;# 
   189  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   190                           OSCCAL equ 090h ;# 
   191  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   192                           WPUA equ 095h ;# 
   193  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   194                           WPU equ 095h ;# 
   195  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   196                           IOCA equ 096h ;# 
   197  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   198                           IOC equ 096h ;# 
   199  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   200                           VRCON equ 099h ;# 
   201  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   202                           EEDAT equ 09Ah ;# 
   203  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   204                           EEDATA equ 09Ah ;# 
   205  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   206                           EEADR equ 09Bh ;# 
   207  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   208                           EECON1 equ 09Ch ;# 
   209  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   210                           EECON2 equ 09Dh ;# 
   211  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   212                           INDF equ 00h ;# 
   213  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   214                           TMR0 equ 01h ;# 
   215  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   216                           PCL equ 02h ;# 
   217  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   218                           STATUS equ 03h ;# 
   219  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   220                           FSR equ 04h ;# 
   221  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   222                           PORTA equ 05h ;# 
   223  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   224                           PORTC equ 07h ;# 
   225  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   226                           PCLATH equ 0Ah ;# 
   227  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   228                           INTCON equ 0Bh ;# 
   229  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   230                           PIR1 equ 0Ch ;# 
   231  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   232                           TMR1 equ 0Eh ;# 
   233  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   234                           TMR1L equ 0Eh ;# 
   235  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   236                           TMR1H equ 0Fh ;# 
   237  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   238                           T1CON equ 010h ;# 
   239  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   240                           CMCON equ 019h ;# 
   241  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   242                           OPTION_REG equ 081h ;# 
   243  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   244                           TRISA equ 085h ;# 
   245  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   246                           TRISC equ 087h ;# 
   247  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   248                           PIE1 equ 08Ch ;# 
   249  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   250                           PCON equ 08Eh ;# 
   251  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   252                           OSCCAL equ 090h ;# 
   253  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   254                           WPUA equ 095h ;# 
   255  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   256                           WPU equ 095h ;# 
   257  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   258                           IOCA equ 096h ;# 
   259  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   260                           IOC equ 096h ;# 
   261  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   262                           VRCON equ 099h ;# 
   263  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   264                           EEDAT equ 09Ah ;# 
   265  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   266                           EEDATA equ 09Ah ;# 
   267  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   268                           EEADR equ 09Bh ;# 
   269  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   270                           EECON1 equ 09Ch ;# 
   271  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   272                           EECON2 equ 09Dh ;# 
   273  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   274                           INDF equ 00h ;# 
   275  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   276                           TMR0 equ 01h ;# 
   277  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   278                           PCL equ 02h ;# 
   279  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   280                           STATUS equ 03h ;# 
   281  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   282                           FSR equ 04h ;# 
   283  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   284                           PORTA equ 05h ;# 
   285  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   286                           PORTC equ 07h ;# 
   287  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   288                           PCLATH equ 0Ah ;# 
   289  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   290                           INTCON equ 0Bh ;# 
   291  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   292                           PIR1 equ 0Ch ;# 
   293  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   294                           TMR1 equ 0Eh ;# 
   295  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   296                           TMR1L equ 0Eh ;# 
   297  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   298                           TMR1H equ 0Fh ;# 
   299  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   300                           T1CON equ 010h ;# 
   301  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   302                           CMCON equ 019h ;# 
   303  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   304                           OPTION_REG equ 081h ;# 
   305  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   306                           TRISA equ 085h ;# 
   307  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   308                           TRISC equ 087h ;# 
   309  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   310                           PIE1 equ 08Ch ;# 
   311  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   312                           PCON equ 08Eh ;# 
   313  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   314                           OSCCAL equ 090h ;# 
   315  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   316                           WPUA equ 095h ;# 
   317  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   318                           WPU equ 095h ;# 
   319  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   320                           IOCA equ 096h ;# 
   321  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   322                           IOC equ 096h ;# 
   323  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   324                           VRCON equ 099h ;# 
   325  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   326                           EEDAT equ 09Ah ;# 
   327  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   328                           EEDATA equ 09Ah ;# 
   329  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   330                           EEADR equ 09Bh ;# 
   331  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   332                           EECON1 equ 09Ch ;# 
   333  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   334                           EECON2 equ 09Dh ;# 
   335  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   336                           INDF equ 00h ;# 
   337  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   338                           TMR0 equ 01h ;# 
   339  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   340                           PCL equ 02h ;# 
   341  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   342                           STATUS equ 03h ;# 
   343  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   344                           FSR equ 04h ;# 
   345  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   346                           PORTA equ 05h ;# 
   347  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   348                           PORTC equ 07h ;# 
   349  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   350                           PCLATH equ 0Ah ;# 
   351  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   352                           INTCON equ 0Bh ;# 
   353  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   354                           PIR1 equ 0Ch ;# 
   355  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   356                           TMR1 equ 0Eh ;# 
   357  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   358                           TMR1L equ 0Eh ;# 
   359  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   360                           TMR1H equ 0Fh ;# 
   361  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   362                           T1CON equ 010h ;# 
   363  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   364                           CMCON equ 019h ;# 
   365  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   366                           OPTION_REG equ 081h ;# 
   367  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   368                           TRISA equ 085h ;# 
   369  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   370                           TRISC equ 087h ;# 
   371  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   372                           PIE1 equ 08Ch ;# 
   373  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   374                           PCON equ 08Eh ;# 
   375  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   376                           OSCCAL equ 090h ;# 
   377  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   378                           WPUA equ 095h ;# 
   379  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   380                           WPU equ 095h ;# 
   381  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   382                           IOCA equ 096h ;# 
   383  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   384                           IOC equ 096h ;# 
   385  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   386                           VRCON equ 099h ;# 
   387  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   388                           EEDAT equ 09Ah ;# 
   389  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   390                           EEDATA equ 09Ah ;# 
   391  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   392                           EEADR equ 09Bh ;# 
   393  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   394                           EECON1 equ 09Ch ;# 
   395  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   396                           EECON2 equ 09Dh ;# 
   397  009D                     	FNCALL	_main,_Initialise
   398                           	FNCALL	_Initialise,_BitDataInit
   399                           	FNCALL	_Initialise,_StartTickTimer
   400                           	FNROOT	_main
   401                           	FNCALL	_ISR,_BitIntr
   402                           	FNCALL	_ISR,_EdgeIntr
   403                           	FNCALL	_ISR,_SendModule
   404                           	FNCALL	_ISR,i1_StartTickTimer
   405                           	FNCALL	intlevel1,_ISR
   406                           	global	intlevel1
   407                           	FNROOT	intlevel1
   408                           	global	_BOX_ADDRESS
   409                           psect	strings,class=STRING,delta=2,noexec
   410                           global __pstrings
   411                           __pstrings:
   412  00F8                     stringtab:
   413  00F8                     	global    __stringtab
   414                           __stringtab:
   415  00F8                     ;	String table - string pointers are 1 byte each
   416                           stringcode:stringdir:
   417  00F8                     movlw high(stringdir)
      + 00F8                     stringdir:	
   418  00F8  3000               movwf pclath
   419  00F9  008A               movf fsr,w
   420  00FA  0804               incf fsr
   421  00FB  0A84               	addwf pc
   422  00FC  0782               	global __stringbase
   423                           __stringbase:
   424  00FD                     	retlw	0
   425  00FD  3400               psect	strings
   426                           	global    __end_of__stringtab
   427                           __end_of__stringtab:
   428  00FE                     	file	"user.c"
   429                           	line	14
   430                           _BOX_ADDRESS:
   431  00FE                     	retlw	low(0)
   432  00FE  3400               	global __end_of_BOX_ADDRESS
   433                           __end_of_BOX_ADDRESS:
   434  00FF                     	global	_BOX_ADDRESS
   435                           	global	_Addressed
   436                           	global	_DataState
   437                           	global	_Data
   438                           	global	_Lamps
   439                           	global	_BoxSize
   440                           	global	_BitCount
   441                           	global	_TickCount
   442                           	global	_TMR1L
   443                           _TMR1L	set	0xE
   444  000E                     	global	_TMR1H
   445                           _TMR1H	set	0xF
   446  000F                     	global	_T1CONbits
   447                           _T1CONbits	set	0x10
   448  0010                     	global	_INTCONbits
   449                           _INTCONbits	set	0xB
   450  000B                     	global	_RA0
   451                           _RA0	set	0x28
   452  0028                     ; #config settings
   453                           global __CFG_FOSC$EC
   454                           __CFG_FOSC$EC equ 0x0
   455  0000                     global __CFG_WDTE$OFF
   456                           __CFG_WDTE$OFF equ 0x0
   457  0000                     global __CFG_PWRTE$OFF
   458                           __CFG_PWRTE$OFF equ 0x0
   459  0000                     global __CFG_MCLRE$ON
   460                           __CFG_MCLRE$ON equ 0x0
   461  0000                     global __CFG_BOREN$OFF
   462                           __CFG_BOREN$OFF equ 0x0
   463  0000                     global __CFG_CP$OFF
   464                           __CFG_CP$OFF equ 0x0
   465  0000                     global __CFG_CPD$OFF
   466                           __CFG_CPD$OFF equ 0x0
   467  0000                     	file	"C:\Users\andre\AppData\Local\Temp\s8ro."
   468                           	line	#
   469                           psect cinit,class=CODE,delta=2
   470                           global start_initialization
   471                           start_initialization:
   472  0010                     
   473                           global __initialization
   474                           __initialization:
   475  0010                     psect	bssBANK0,class=BANK0,space=1,noexec
   476                           global __pbssBANK0
   477                           __pbssBANK0:
   478  0020                     _Addressed:
   479  0020                            ds      1
   480  0020                     
   481                           _DataState:
   482  0021                            ds      1
   483  0021                     
   484                           _Data:
   485  0022                            ds      1
   486  0022                     
   487                           _Lamps:
   488  0023                            ds      1
   489  0023                     
   490                           _BoxSize:
   491  0024                            ds      1
   492  0024                     
   493                           _Address:
   494  0025                            ds      1
   495  0025                     
   496                           _Sync:
   497  0026                            ds      1
   498  0026                     
   499                           _BitCount:
   500  0027                            ds      1
   501  0027                     
   502                           _TickCount:
   503  0028                            ds      1
   504  0028                     
   505                           	file	"C:\Users\andre\AppData\Local\Temp\s8ro."
   506                           	line	#
   507                           ; Clear objects allocated to BANK0
   508                           psect cinit,class=CODE,delta=2,merge=1
   509                           	bcf	status, 5	;RP0=0, select bank0
   510  0010  1283               	clrf	((__pbssBANK0)+0)&07Fh
   511  0011  01A0               	clrf	((__pbssBANK0)+1)&07Fh
   512  0012  01A1               	clrf	((__pbssBANK0)+2)&07Fh
   513  0013  01A2               	clrf	((__pbssBANK0)+3)&07Fh
   514  0014  01A3               	clrf	((__pbssBANK0)+4)&07Fh
   515  0015  01A4               	clrf	((__pbssBANK0)+5)&07Fh
   516  0016  01A5               	clrf	((__pbssBANK0)+6)&07Fh
   517  0017  01A6               	clrf	((__pbssBANK0)+7)&07Fh
   518  0018  01A7               	clrf	((__pbssBANK0)+8)&07Fh
   519  0019  01A8               psect cinit,class=CODE,delta=2,merge=1
   520                           global end_of_initialization,__end_of__initialization
   521                           
   522                           ;End of C runtime variable initialization code
   523                           
   524                           end_of_initialization:
   525  001A                     __end_of__initialization:
   526  001A                     clrf status
   527  001A  0183               ljmp _main	;jump to C main() function
   528  001B  2905               psect	cstackCOMMON,class=COMMON,space=1,noexec
   529                           global __pcstackCOMMON
   530                           __pcstackCOMMON:
   531  0000                     ??_Initialise:	; 1 bytes @ 0x0
   532  0000                     ??_StartTickTimer:	; 1 bytes @ 0x0
   533  0000                     ??_BitDataInit:	; 1 bytes @ 0x0
   534  0000                     ??_main:	; 1 bytes @ 0x0
   535  0000                     ??_EdgeIntr:	; 1 bytes @ 0x0
   536  0000                     ??_SendModule:	; 1 bytes @ 0x0
   537  0000                     ??i1_StartTickTimer:	; 1 bytes @ 0x0
   538  0000                     psect	cstackBANK0,class=BANK0,space=1,noexec
   539                           global __pcstackBANK0
   540                           __pcstackBANK0:
   541  0029                     ?_Initialise:	; 1 bytes @ 0x0
   542  0029                     ?_StartTickTimer:	; 1 bytes @ 0x0
   543  0029                     ?_BitDataInit:	; 1 bytes @ 0x0
   544  0029                     ?_main:	; 1 bytes @ 0x0
   545  0029                     ?_EdgeIntr:	; 1 bytes @ 0x0
   546  0029                     ?_BitIntr:	; 1 bytes @ 0x0
   547  0029                     ??_BitIntr:	; 1 bytes @ 0x0
   548  0029                     ?_SendModule:	; 1 bytes @ 0x0
   549  0029                     ?_ISR:	; 1 bytes @ 0x0
   550  0029                     ?i1_StartTickTimer:	; 1 bytes @ 0x0
   551  0029                     	global	i1StartTickTimer@IntEnable
   552                           i1StartTickTimer@IntEnable:	; 1 bytes @ 0x0
   553  0029                     	ds	1
   554  0029                     ??_ISR:	; 1 bytes @ 0x1
   555  002A                     	ds	5
   556  002A                     	global	StartTickTimer@IntEnable
   557                           StartTickTimer@IntEnable:	; 1 bytes @ 0x6
   558  002F                     	ds	1
   559  002F                     ;!
   560                           ;!Data Sizes:
   561                           ;!    Strings     0
   562                           ;!    Constant    1
   563                           ;!    Data        0
   564                           ;!    BSS         9
   565                           ;!    Persistent  0
   566                           ;!    Stack       0
   567                           ;!
   568                           ;!Auto Spaces:
   569                           ;!    Space          Size  Autos    Used
   570                           ;!    COMMON            0      0       0
   571                           ;!    BANK0            62      7      16
   572                           
   573                           ;!
   574                           ;!Pointer List with Targets:
   575                           ;!
   576                           ;!    None.
   577                           
   578                           
   579                           ;!
   580                           ;!Critical Paths under _main in COMMON
   581                           ;!
   582                           ;!    None.
   583                           ;!
   584                           ;!Critical Paths under _ISR in COMMON
   585                           ;!
   586                           ;!    None.
   587                           ;!
   588                           ;!Critical Paths under _main in BANK0
   589                           ;!
   590                           ;!    _Initialise->_StartTickTimer
   591                           ;!
   592                           ;!Critical Paths under _ISR in BANK0
   593                           ;!
   594                           ;!    _ISR->_BitIntr
   595                           ;!    _ISR->i1_StartTickTimer
   596                           
   597 ;;
   598 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   599 ;;
   600                           
   601                           ;!
   602                           ;!Call Graph Tables:
   603                           ;!
   604                           ;! ---------------------------------------------------------------------------------
   605                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   606                           ;! ---------------------------------------------------------------------------------
   607                           ;! (0) _main                                                 0     0      0      23
   608                           ;!                         _Initialise
   609                           ;! ---------------------------------------------------------------------------------
   610                           ;! (1) _Initialise                                           0     0      0      23
   611                           ;!                        _BitDataInit
   612                           ;!                     _StartTickTimer
   613                           ;! ---------------------------------------------------------------------------------
   614                           ;! (2) _StartTickTimer                                       1     1      0      23
   615                           ;!                                              6 BANK0      1     1      0
   616                           ;! ---------------------------------------------------------------------------------
   617                           ;! (2) _BitDataInit                                          0     0      0       0
   618                           ;! ---------------------------------------------------------------------------------
   619                           ;! Estimated maximum stack depth 2
   620                           ;! ---------------------------------------------------------------------------------
   621                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   622                           ;! ---------------------------------------------------------------------------------
   623                           ;! (3) _ISR                                                  5     5      0      23
   624                           ;!                                              1 BANK0      5     5      0
   625                           ;!                            _BitIntr
   626                           ;!                           _EdgeIntr
   627                           ;!                         _SendModule
   628                           ;!                   i1_StartTickTimer
   629                           ;! ---------------------------------------------------------------------------------
   630                           ;! (4) i1_StartTickTimer                                     1     1      0      23
   631                           ;!                                              0 BANK0      1     1      0
   632                           ;! ---------------------------------------------------------------------------------
   633                           ;! (4) _SendModule                                           0     0      0       0
   634                           ;! ---------------------------------------------------------------------------------
   635                           ;! (4) _EdgeIntr                                             0     0      0       0
   636                           ;! ---------------------------------------------------------------------------------
   637                           ;! (5) _BitIntr                                              1     1      0       0
   638                           ;!                                              0 BANK0      1     1      0
   639                           ;! ---------------------------------------------------------------------------------
   640                           ;! Estimated maximum stack depth 5
   641                           ;! ---------------------------------------------------------------------------------
   642                           ;!
   643                           ;! Call Graph Graphs:
   644                           ;!
   645                           ;! _main (ROOT)
   646                           ;!   _Initialise
   647                           ;!     _BitDataInit
   648                           ;!     _StartTickTimer
   649                           ;!
   650                           ;! _ISR (ROOT)
   651                           ;!   _BitIntr
   652                           ;!   _EdgeIntr
   653                           ;!   _SendModule
   654                           ;!   i1_StartTickTimer
   655                           ;!
   656                           
   657                           ;! Address spaces:
   658                           
   659                           ;!Name               Size   Autos  Total    Cost      Usage
   660                           ;!BITCOMMON            0      0       0       0        0.0%
   661                           ;!EEDATA              80      0       0       0        0.0%
   662                           ;!NULL                 0      0       0       0        0.0%
   663                           ;!CODE                 0      0       0       0        0.0%
   664                           ;!BITSFR0              0      0       0       1        0.0%
   665                           ;!SFR0                 0      0       0       1        0.0%
   666                           ;!COMMON               0      0       0       1        0.0%
   667                           ;!BITSFR1              0      0       0       2        0.0%
   668                           ;!SFR1                 0      0       0       2        0.0%
   669                           ;!STACK                0      0       0       2        0.0%
   670                           ;!BITBANK0            3E      0       0       3        0.0%
   671                           ;!BANK0               3E      7      10       4       25.8%
   672                           ;!ABS                  0      0      10       5        0.0%
   673                           ;!DATA                 0      0      10       6        0.0%
   674                           
   675                           	global	_main
   676                           
   677 ;; *************** function _main *****************
   678 ;; Defined at:
   679 ;;		line 7 in file "main.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;		None
   682 ;; Auto vars:     Size  Location     Type
   683 ;;		None
   684 ;; Return value:  Size  Location     Type
   685 ;;                  1    wreg      void 
   686 ;; Registers used:
   687 ;;		wreg, status,2, status,0, pclath, cstack
   688 ;; Tracked objects:
   689 ;;		On entry : B00/0
   690 ;;		On exit  : 0/0
   691 ;;		Unchanged: 0/0
   692 ;; Data sizes:     COMMON   BANK0
   693 ;;      Params:         0       0
   694 ;;      Locals:         0       0
   695 ;;      Temps:          0       0
   696 ;;      Totals:         0       0
   697 ;;Total ram usage:        0 bytes
   698 ;; Hardware stack levels required when called:    5
   699 ;; This function calls:
   700 ;;		_Initialise
   701 ;; This function is called by:
   702 ;;		Startup code after reset
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   706                           	file	"main.c"
   707                           	line	7
   708                           global __pmaintext
   709                           __pmaintext:	;psect for function _main
   710  0105                     psect	maintext
   711                           	file	"main.c"
   712                           	line	7
   713                           	global	__size_of_main
   714                           	__size_of_main	equ	__end_of_main-_main
   715  0005                     	
   716                           _main:	
   717  0105                     ;incstack = 0
   718                           	opt	stack 3
   719                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   720                           	line	9
   721                           	
   722                           l881:	
   723  0105                     ;main.c: 9:     Initialise();
   724                           	fcall	_Initialise
   725  0105  210F               	line	12
   726                           	
   727                           l883:	
   728  0106                     ;main.c: 12:     INTCONbits.GIE = 1;
   729                           	bsf	(11),7	;volatile
   730  0106  178B               	line	14
   731                           ;main.c: 14:     while(1==1)
   732                           	goto	l9
   733  0107  2908               	
   734                           l10:	
   735  0108                     	line	17
   736                           ;main.c: 15:     {;main.c: 17:     }
   737                           	
   738                           l9:	
   739  0108                     	line	14
   740                           ;main.c: 14:     while(1==1)
   741                           	goto	l10
   742  0108  2908               	
   743                           l11:	
   744  0109                     	line	20
   745                           ;main.c: 19:     return;
   746                           	
   747                           l12:	
   748  0109                     	global	start
   749                           	ljmp	start
   750  0109  280F               	opt stack 0
   751                           GLOBAL	__end_of_main
   752                           	__end_of_main:
   753  010A                     	signat	_main,89
   754                           	global	_Initialise
   755                           
   756 ;; *************** function _Initialise *****************
   757 ;; Defined at:
   758 ;;		line 14 in file "system.c"
   759 ;; Parameters:    Size  Location     Type
   760 ;;		None
   761 ;; Auto vars:     Size  Location     Type
   762 ;;		None
   763 ;; Return value:  Size  Location     Type
   764 ;;                  1    wreg      void 
   765 ;; Registers used:
   766 ;;		wreg, status,2, status,0, pclath, cstack
   767 ;; Tracked objects:
   768 ;;		On entry : 0/0
   769 ;;		On exit  : 0/0
   770 ;;		Unchanged: 0/0
   771 ;; Data sizes:     COMMON   BANK0
   772 ;;      Params:         0       0
   773 ;;      Locals:         0       0
   774 ;;      Temps:          0       0
   775 ;;      Totals:         0       0
   776 ;;Total ram usage:        0 bytes
   777 ;; Hardware stack levels used:    1
   778 ;; Hardware stack levels required when called:    4
   779 ;; This function calls:
   780 ;;		_BitDataInit
   781 ;;		_StartTickTimer
   782 ;; This function is called by:
   783 ;;		_main
   784 ;; This function uses a non-reentrant model
   785 ;;
   786                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
   787                           	file	"system.c"
   788                           	line	14
   789                           global __ptext1
   790                           __ptext1:	;psect for function _Initialise
   791  010F                     psect	text1
   792                           	file	"system.c"
   793                           	line	14
   794                           	global	__size_of_Initialise
   795                           	__size_of_Initialise	equ	__end_of_Initialise-_Initialise
   796  0004                     	
   797                           _Initialise:	
   798  010F                     ;incstack = 0
   799                           	opt	stack 3
   800                           ; Regs used in _Initialise: [wreg+status,2+status,0+pclath+cstack]
   801                           	line	17
   802                           	
   803                           l807:	
   804  010F                     ;system.c: 17:     StartTickTimer();
   805                           	fcall	_StartTickTimer
   806  010F  20D2               	line	19
   807                           	
   808                           l809:	
   809  0110                     ;system.c: 19:     BitDataInit();
   810                           	fcall	_BitDataInit
   811  0110  210A               	line	22
   812                           	
   813                           l811:	
   814  0111                     ;system.c: 22:     INTCONbits.PEIE = 1;
   815                           	bsf	(11),6	;volatile
   816  0111  170B               	line	23
   817                           	
   818                           l21:	
   819  0112                     	return
   820  0112  0008               	opt stack 0
   821                           GLOBAL	__end_of_Initialise
   822                           	__end_of_Initialise:
   823  0113                     	signat	_Initialise,89
   824                           	global	_StartTickTimer
   825                           
   826 ;; *************** function _StartTickTimer *****************
   827 ;; Defined at:
   828 ;;		line 41 in file "user.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;		None
   831 ;; Auto vars:     Size  Location     Type
   832 ;;  IntEnable       1    6[BANK0 ] unsigned char 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  1    wreg      void 
   835 ;; Registers used:
   836 ;;		wreg, status,2, status,0
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMMON   BANK0
   842 ;;      Params:         0       0
   843 ;;      Locals:         0       1
   844 ;;      Temps:          0       0
   845 ;;      Totals:         0       1
   846 ;;Total ram usage:        1 bytes
   847 ;; Hardware stack levels used:    1
   848 ;; Hardware stack levels required when called:    3
   849 ;; This function calls:
   850 ;;		Nothing
   851 ;; This function is called by:
   852 ;;		_Initialise
   853 ;; This function uses a non-reentrant model
   854 ;;
   855                           psect	text2,local,class=CODE,delta=2,merge=1,group=0
   856                           	file	"user.c"
   857                           	line	41
   858                           global __ptext2
   859                           __ptext2:	;psect for function _StartTickTimer
   860  00D2                     psect	text2
   861                           	file	"user.c"
   862                           	line	41
   863                           	global	__size_of_StartTickTimer
   864                           	__size_of_StartTickTimer	equ	__end_of_StartTickTimer-_StartTickTimer
   865  0013                     	
   866                           _StartTickTimer:	
   867  00D2                     ;incstack = 0
   868                           	opt	stack 3
   869                           ; Regs used in _StartTickTimer: [wreg+status,2+status,0]
   870                           	line	46
   871                           	
   872                           l789:	
   873  00D2                     ;user.c: 43:     uint8_t IntEnable;;user.c: 46:     IntEnable = INTCONbits.GIE;
   874                           	movlw	0
   875  00D2  3000               	btfsc	(11),7	;volatile
   876  00D3  1B8B               	movlw	1
   877  00D4  3001               	bcf	status, 5	;RP0=0, select bank0
   878  00D5  1283               	movwf	(StartTickTimer@IntEnable)
   879  00D6  00AF               	line	49
   880                           	
   881                           l791:	
   882  00D7                     ;user.c: 49:     INTCONbits.GIE = 0;
   883                           	bcf	(11),7	;volatile
   884  00D7  138B               	line	51
   885                           	
   886                           l793:	
   887  00D8                     ;user.c: 51:     T1CONbits.TMR1ON = 0;
   888                           	bcf	(16),0	;volatile
   889  00D8  1010               	line	53
   890                           	
   891                           l795:	
   892  00D9                     ;user.c: 53:     INTCONbits.T0IF = 0;
   893                           	bcf	(11),2	;volatile
   894  00D9  110B               	line	55
   895                           	
   896                           l797:	
   897  00DA                     ;user.c: 55:     TMR1H = 0xC3;
   898                           	movlw	low(0C3h)
   899  00DA  30C3               	movwf	(15)	;volatile
   900  00DB  008F               	line	56
   901                           	
   902                           l799:	
   903  00DC                     ;user.c: 56:     TMR1L = 0x50;
   904                           	movlw	low(050h)
   905  00DC  3050               	movwf	(14)	;volatile
   906  00DD  008E               	line	57
   907                           	
   908                           l801:	
   909  00DE                     ;user.c: 57:     T1CONbits.TMR1ON = 1;
   910                           	bsf	(16),0	;volatile
   911  00DE  1410               	line	60
   912                           	
   913                           l803:	
   914  00DF                     ;user.c: 60:     INTCONbits.GIE = IntEnable;
   915                           	rrf	(StartTickTimer@IntEnable),w
   916  00DF  0C2F               	skipc
   917  00E0  1C03               	bcf	(11),7	;volatile
   918  00E1  138B               	skipnc
   919  00E2  1803               	bsf	(11),7	;volatile
   920  00E3  178B               	line	61
   921                           	
   922                           l57:	
   923  00E4                     	return
   924  00E4  0008               	opt stack 0
   925                           GLOBAL	__end_of_StartTickTimer
   926                           	__end_of_StartTickTimer:
   927  00E5                     	signat	_StartTickTimer,89
   928                           	global	_BitDataInit
   929                           
   930 ;; *************** function _BitDataInit *****************
   931 ;; Defined at:
   932 ;;		line 33 in file "user.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;		None
   935 ;; Auto vars:     Size  Location     Type
   936 ;;		None
   937 ;; Return value:  Size  Location     Type
   938 ;;                  1    wreg      void 
   939 ;; Registers used:
   940 ;;		status,2
   941 ;; Tracked objects:
   942 ;;		On entry : 0/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMMON   BANK0
   946 ;;      Params:         0       0
   947 ;;      Locals:         0       0
   948 ;;      Temps:          0       0
   949 ;;      Totals:         0       0
   950 ;;Total ram usage:        0 bytes
   951 ;; Hardware stack levels used:    1
   952 ;; Hardware stack levels required when called:    3
   953 ;; This function calls:
   954 ;;		Nothing
   955 ;; This function is called by:
   956 ;;		_Initialise
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           psect	text3,local,class=CODE,delta=2,merge=1,group=0
   960                           	line	33
   961                           global __ptext3
   962                           __ptext3:	;psect for function _BitDataInit
   963  010A                     psect	text3
   964                           	file	"user.c"
   965                           	line	33
   966                           	global	__size_of_BitDataInit
   967                           	__size_of_BitDataInit	equ	__end_of_BitDataInit-_BitDataInit
   968  0005                     	
   969                           _BitDataInit:	
   970  010A                     ;incstack = 0
   971                           	opt	stack 3
   972                           ; Regs used in _BitDataInit: [status,2]
   973                           	line	35
   974                           	
   975                           l805:	
   976  010A                     ;user.c: 35:     DataState = DATA_SYNC;
   977                           	bcf	status, 5	;RP0=0, select bank0
   978  010A  1283               	clrf	(_DataState)
   979  010B  01A1               	line	36
   980                           ;user.c: 36:     Data = 0;
   981                           	clrf	(_Data)
   982  010C  01A2               	line	37
   983                           ;user.c: 37:  Addressed = 0;
   984                           	clrf	(_Addressed)
   985  010D  01A0               	line	38
   986                           	
   987                           l54:	
   988  010E                     	return
   989  010E  0008               	opt stack 0
   990                           GLOBAL	__end_of_BitDataInit
   991                           	__end_of_BitDataInit:
   992  010F                     	signat	_BitDataInit,89
   993                           	global	_ISR
   994                           
   995 ;; *************** function _ISR *****************
   996 ;; Defined at:
   997 ;;		line 16 in file "interrupts.c"
   998 ;; Parameters:    Size  Location     Type
   999 ;;		None
  1000 ;; Auto vars:     Size  Location     Type
  1001 ;;		None
  1002 ;; Return value:  Size  Location     Type
  1003 ;;                  1    wreg      void 
  1004 ;; Registers used:
  1005 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1006 ;; Tracked objects:
  1007 ;;		On entry : 0/0
  1008 ;;		On exit  : 0/0
  1009 ;;		Unchanged: 0/0
  1010 ;; Data sizes:     COMMON   BANK0
  1011 ;;      Params:         0       0
  1012 ;;      Locals:         0       0
  1013 ;;      Temps:          0       5
  1014 ;;      Totals:         0       5
  1015 ;;Total ram usage:        5 bytes
  1016 ;; Hardware stack levels used:    1
  1017 ;; Hardware stack levels required when called:    2
  1018 ;; This function calls:
  1019 ;;		_BitIntr
  1020 ;;		_EdgeIntr
  1021 ;;		_SendModule
  1022 ;;		i1_StartTickTimer
  1023 ;; This function is called by:
  1024 ;;		Interrupt level 1
  1025 ;; This function uses a non-reentrant model
  1026 ;;
  1027                           psect	text4,local,class=CODE,delta=2,merge=1,group=0
  1028                           	file	"interrupts.c"
  1029                           	line	16
  1030                           global __ptext4
  1031                           __ptext4:	;psect for function _ISR
  1032  00A4                     psect	text4
  1033                           	file	"interrupts.c"
  1034                           	line	16
  1035                           	global	__size_of_ISR
  1036                           	__size_of_ISR	equ	__end_of_ISR-_ISR
  1037  002E                     	
  1038                           _ISR:	
  1039  00A4                     ;incstack = 0
  1040                           	opt	stack 3
  1041                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1042                           psect	intentry,class=CODE,delta=2
  1043                           global __pintentry
  1044                           __pintentry:
  1045  0004                     global interrupt_function
  1046                           interrupt_function:
  1047  0004                     	global saved_w
  1048                           	saved_w	set	btemp+0
  1049  005E                     	movwf	saved_w
  1050  0004  00DE               	swapf	status,w
  1051  0005  0E03               	bcf	status, 5	;RP0=0, select bank0
  1052  0006  1283               	movwf	(??_ISR+1)
  1053  0007  00AB               	movf	fsr0,w
  1054  0008  0804               	movwf	(??_ISR+2)
  1055  0009  00AC               	movf	pclath,w
  1056  000A  080A               	movwf	(??_ISR+3)
  1057  000B  00AD               	movf	btemp+1,w
  1058  000C  085F               	movwf	(??_ISR+4)
  1059  000D  00AE               	ljmp	_ISR
  1060  000E  28A4               psect	text4
  1061                           	line	18
  1062                           	
  1063                           i1l885:	
  1064  00A4                     ;interrupts.c: 18:     if (INTCONbits.T0IF==1)
  1065                           	btfss	(11),2	;volatile
  1066  00A4  1D0B               	goto	u28_21
  1067  00A5  28A7               	goto	u28_20
  1068  00A6  28A8               u28_21:
  1069  00A7                     	goto	i1l897
  1070  00A7  28BA               u28_20:
  1071  00A8                     	line	20
  1072                           	
  1073                           i1l887:	
  1074  00A8                     ;interrupts.c: 19:     {;interrupts.c: 20:         StartTickTimer();
  1075                           	fcall	i1_StartTickTimer
  1076  00A8  20E5               	line	23
  1077                           	
  1078                           i1l889:	
  1079  00A9                     ;interrupts.c: 23:         if (TickCount==9)
  1080                           		movlw	9
  1081  00A9  3009               	bcf	status, 5	;RP0=0, select bank0
  1082  00AA  1283               	xorwf	((_TickCount)),w
  1083  00AB  0628               	btfss	status,2
  1084  00AC  1D03               	goto	u29_21
  1085  00AD  28AF               	goto	u29_20
  1086  00AE  28B0               u29_21:
  1087  00AF                     	goto	i1l895
  1088  00AF  28B3               u29_20:
  1089  00B0                     	line	25
  1090                           	
  1091                           i1l891:	
  1092  00B0                     ;interrupts.c: 24:         {;interrupts.c: 25:             TickCount = 0;
  1093                           	clrf	(_TickCount)
  1094  00B0  01A8               	line	26
  1095                           	
  1096                           i1l893:	
  1097  00B1                     ;interrupts.c: 26:             SendModule();
  1098                           	fcall	_SendModule
  1099  00B1  2113               	line	27
  1100                           ;interrupts.c: 27:         }
  1101                           	goto	i1l897
  1102  00B2  28BA               	line	28
  1103                           ;interrupts.c: 28:         else
  1104                           	
  1105                           i1l100:	
  1106  00B3                     	line	30
  1107                           	
  1108                           i1l895:	
  1109  00B3                     ;interrupts.c: 29:         {;interrupts.c: 30:             TickCount++;
  1110                           	movlw	low(01h)
  1111  00B3  3001               	bcf	status, 5	;RP0=0, select bank0
  1112  00B4  1283               	movwf	(??_ISR+0)+0
  1113  00B5  00AA               	movf	(??_ISR+0)+0,w
  1114  00B6  082A               	addwf	(_TickCount),f
  1115  00B7  07A8               	goto	i1l897
  1116  00B8  28BA               	line	31
  1117                           ;interrupts.c: 31:         }
  1118                           	
  1119                           i1l101:	
  1120  00B9                     	goto	i1l897
  1121  00B9  28BA               	line	32
  1122                           ;interrupts.c: 32:     }
  1123                           	
  1124                           i1l99:	
  1125  00BA                     	line	34
  1126                           	
  1127                           i1l897:	
  1128  00BA                     ;interrupts.c: 34:     if (INTCONbits.RAIF==1)
  1129                           	btfss	(11),0	;volatile
  1130  00BA  1C0B               	goto	u30_21
  1131  00BB  28BD               	goto	u30_20
  1132  00BC  28BE               u30_21:
  1133  00BD                     	goto	i1l901
  1134  00BD  28C0               u30_20:
  1135  00BE                     	line	36
  1136                           	
  1137                           i1l899:	
  1138  00BE                     ;interrupts.c: 35:     {;interrupts.c: 36:         EdgeIntr();
  1139                           	fcall	_EdgeIntr
  1140  00BE  20FF               	goto	i1l901
  1141  00BF  28C0               	line	37
  1142                           ;interrupts.c: 37:     }
  1143                           	
  1144                           i1l102:	
  1145  00C0                     	line	39
  1146                           	
  1147                           i1l901:	
  1148  00C0                     ;interrupts.c: 39:     if (INTCONbits.GIE==1)
  1149                           	btfss	(11),7	;volatile
  1150  00C0  1F8B               	goto	u31_21
  1151  00C1  28C3               	goto	u31_20
  1152  00C2  28C4               u31_21:
  1153  00C3                     	goto	i1l104
  1154  00C3  28C6               u31_20:
  1155  00C4                     	line	41
  1156                           	
  1157                           i1l903:	
  1158  00C4                     ;interrupts.c: 40:     {;interrupts.c: 41:         BitIntr();
  1159                           	fcall	_BitIntr
  1160  00C4  201C               	goto	i1l104
  1161  00C5  28C6               	line	42
  1162                           ;interrupts.c: 42:     }
  1163                           	
  1164                           i1l103:	
  1165  00C6                     	line	44
  1166                           	
  1167                           i1l104:	
  1168  00C6                     	bcf	status, 5	;RP0=0, select bank0
  1169  00C6  1283               	movf	(??_ISR+4),w
  1170  00C7  082E               	movwf	btemp+1
  1171  00C8  00DF               	movf	(??_ISR+3),w
  1172  00C9  082D               	movwf	pclath
  1173  00CA  008A               	movf	(??_ISR+2),w
  1174  00CB  082C               	movwf	fsr0
  1175  00CC  0084               	swapf	(??_ISR+1)^00h,w
  1176  00CD  0E2B               	movwf	status
  1177  00CE  0083               	swapf	saved_w,f
  1178  00CF  0EDE               	swapf	saved_w,w
  1179  00D0  0E5E               	retfie
  1180  00D1  0009               	opt stack 0
  1181                           GLOBAL	__end_of_ISR
  1182                           	__end_of_ISR:
  1183  00D2                     	signat	_ISR,89
  1184                           	global	i1_StartTickTimer
  1185                           
  1186 ;; *************** function i1_StartTickTimer *****************
  1187 ;; Defined at:
  1188 ;;		line 41 in file "user.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;		None
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;  StartTickTim    1    0[BANK0 ] unsigned char 
  1193 ;; Return value:  Size  Location     Type
  1194 ;;                  1    wreg      void 
  1195 ;; Registers used:
  1196 ;;		wreg, status,2, status,0
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMMON   BANK0
  1202 ;;      Params:         0       0
  1203 ;;      Locals:         0       1
  1204 ;;      Temps:          0       0
  1205 ;;      Totals:         0       1
  1206 ;;Total ram usage:        1 bytes
  1207 ;; Hardware stack levels used:    1
  1208 ;; This function calls:
  1209 ;;		Nothing
  1210 ;; This function is called by:
  1211 ;;		_ISR
  1212 ;; This function uses a non-reentrant model
  1213 ;;
  1214                           psect	text5,local,class=CODE,delta=2,merge=1,group=0
  1215                           	file	"user.c"
  1216                           	line	41
  1217                           global __ptext5
  1218                           __ptext5:	;psect for function i1_StartTickTimer
  1219  00E5                     psect	text5
  1220                           	file	"user.c"
  1221                           	line	41
  1222                           	global	__size_ofi1_StartTickTimer
  1223                           	__size_ofi1_StartTickTimer	equ	__end_ofi1_StartTickTimer-i1_StartTickTimer
  1224  0013                     	
  1225                           i1_StartTickTimer:	
  1226  00E5                     ;incstack = 0
  1227                           	opt	stack 4
  1228                           ; Regs used in i1_StartTickTimer: [wreg+status,2+status,0]
  1229                           	line	46
  1230                           	
  1231                           i1l865:	
  1232  00E5                     ;user.c: 43:     uint8_t IntEnable;;user.c: 46:     IntEnable = INTCONbits.GIE;
  1233                           	movlw	0
  1234  00E5  3000               	btfsc	(11),7	;volatile
  1235  00E6  1B8B               	movlw	1
  1236  00E7  3001               	bcf	status, 5	;RP0=0, select bank0
  1237  00E8  1283               	movwf	(i1StartTickTimer@IntEnable)
  1238  00E9  00A9               	line	49
  1239                           	
  1240                           i1l867:	
  1241  00EA                     ;user.c: 49:     INTCONbits.GIE = 0;
  1242                           	bcf	(11),7	;volatile
  1243  00EA  138B               	line	51
  1244                           	
  1245                           i1l869:	
  1246  00EB                     ;user.c: 51:     T1CONbits.TMR1ON = 0;
  1247                           	bcf	(16),0	;volatile
  1248  00EB  1010               	line	53
  1249                           	
  1250                           i1l871:	
  1251  00EC                     ;user.c: 53:     INTCONbits.T0IF = 0;
  1252                           	bcf	(11),2	;volatile
  1253  00EC  110B               	line	55
  1254                           	
  1255                           i1l873:	
  1256  00ED                     ;user.c: 55:     TMR1H = 0xC3;
  1257                           	movlw	low(0C3h)
  1258  00ED  30C3               	movwf	(15)	;volatile
  1259  00EE  008F               	line	56
  1260                           	
  1261                           i1l875:	
  1262  00EF                     ;user.c: 56:     TMR1L = 0x50;
  1263                           	movlw	low(050h)
  1264  00EF  3050               	movwf	(14)	;volatile
  1265  00F0  008E               	line	57
  1266                           	
  1267                           i1l877:	
  1268  00F1                     ;user.c: 57:     T1CONbits.TMR1ON = 1;
  1269                           	bsf	(16),0	;volatile
  1270  00F1  1410               	line	60
  1271                           	
  1272                           i1l879:	
  1273  00F2                     ;user.c: 60:     INTCONbits.GIE = IntEnable;
  1274                           	rrf	(i1StartTickTimer@IntEnable),w
  1275  00F2  0C29               	skipc
  1276  00F3  1C03               	bcf	(11),7	;volatile
  1277  00F4  138B               	skipnc
  1278  00F5  1803               	bsf	(11),7	;volatile
  1279  00F6  178B               	line	61
  1280                           	
  1281                           i1l57:	
  1282  00F7                     	return
  1283  00F7  0008               	opt stack 0
  1284                           GLOBAL	__end_ofi1_StartTickTimer
  1285                           	__end_ofi1_StartTickTimer:
  1286  00F8                     	signat	i1_StartTickTimer,89
  1287                           	global	_SendModule
  1288                           
  1289 ;; *************** function _SendModule *****************
  1290 ;; Defined at:
  1291 ;;		line 137 in file "user.c"
  1292 ;; Parameters:    Size  Location     Type
  1293 ;;		None
  1294 ;; Auto vars:     Size  Location     Type
  1295 ;;		None
  1296 ;; Return value:  Size  Location     Type
  1297 ;;                  1    wreg      void 
  1298 ;; Registers used:
  1299 ;;		None
  1300 ;; Tracked objects:
  1301 ;;		On entry : 0/0
  1302 ;;		On exit  : 0/0
  1303 ;;		Unchanged: 0/0
  1304 ;; Data sizes:     COMMON   BANK0
  1305 ;;      Params:         0       0
  1306 ;;      Locals:         0       0
  1307 ;;      Temps:          0       0
  1308 ;;      Totals:         0       0
  1309 ;;Total ram usage:        0 bytes
  1310 ;; Hardware stack levels used:    1
  1311 ;; This function calls:
  1312 ;;		Nothing
  1313 ;; This function is called by:
  1314 ;;		_ISR
  1315 ;; This function uses a non-reentrant model
  1316 ;;
  1317                           psect	text6,local,class=CODE,delta=2,merge=1,group=0
  1318                           	line	137
  1319                           global __ptext6
  1320                           __ptext6:	;psect for function _SendModule
  1321  0113                     psect	text6
  1322                           	file	"user.c"
  1323                           	line	137
  1324                           	global	__size_of_SendModule
  1325                           	__size_of_SendModule	equ	__end_of_SendModule-_SendModule
  1326  0001                     	
  1327                           _SendModule:	
  1328  0113                     ;incstack = 0
  1329                           	opt	stack 4
  1330                           ; Regs used in _SendModule: []
  1331                           	line	140
  1332                           	
  1333                           i1l82:	
  1334  0113                     	return
  1335  0113  0008               	opt stack 0
  1336                           GLOBAL	__end_of_SendModule
  1337                           	__end_of_SendModule:
  1338  0114                     	signat	_SendModule,89
  1339                           	global	_EdgeIntr
  1340                           
  1341 ;; *************** function _EdgeIntr *****************
  1342 ;; Defined at:
  1343 ;;		line 63 in file "user.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;		None
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;		None
  1348 ;; Return value:  Size  Location     Type
  1349 ;;                  1    wreg      void 
  1350 ;; Registers used:
  1351 ;;		wreg, status,2
  1352 ;; Tracked objects:
  1353 ;;		On entry : 0/0
  1354 ;;		On exit  : 0/0
  1355 ;;		Unchanged: 0/0
  1356 ;; Data sizes:     COMMON   BANK0
  1357 ;;      Params:         0       0
  1358 ;;      Locals:         0       0
  1359 ;;      Temps:          0       0
  1360 ;;      Totals:         0       0
  1361 ;;Total ram usage:        0 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; This function calls:
  1364 ;;		Nothing
  1365 ;; This function is called by:
  1366 ;;		_ISR
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           psect	text7,local,class=CODE,delta=2,merge=1,group=0
  1370                           	line	63
  1371                           global __ptext7
  1372                           __ptext7:	;psect for function _EdgeIntr
  1373  00FF                     psect	text7
  1374                           	file	"user.c"
  1375                           	line	63
  1376                           	global	__size_of_EdgeIntr
  1377                           	__size_of_EdgeIntr	equ	__end_of_EdgeIntr-_EdgeIntr
  1378  0006                     	
  1379                           _EdgeIntr:	
  1380  00FF                     ;incstack = 0
  1381                           	opt	stack 4
  1382                           ; Regs used in _EdgeIntr: [wreg+status,2]
  1383                           	line	66
  1384                           	
  1385                           i1l813:	
  1386  00FF                     ;user.c: 66:     TMR1H = 2;
  1387                           	movlw	low(02h)
  1388  00FF  3002               	bcf	status, 5	;RP0=0, select bank0
  1389  0100  1283               	movwf	(15)	;volatile
  1390  0101  008F               	line	67
  1391                           	
  1392                           i1l815:	
  1393  0102                     ;user.c: 67:     TMR1L = 0;
  1394                           	clrf	(14)	;volatile
  1395  0102  018E               	line	69
  1396                           	
  1397                           i1l817:	
  1398  0103                     ;user.c: 69:     T1CONbits.TMR1ON = 1;
  1399                           	bsf	(16),0	;volatile
  1400  0103  1410               	line	70
  1401                           	
  1402                           i1l60:	
  1403  0104                     	return
  1404  0104  0008               	opt stack 0
  1405                           GLOBAL	__end_of_EdgeIntr
  1406                           	__end_of_EdgeIntr:
  1407  0105                     	signat	_EdgeIntr,89
  1408                           	global	_BitIntr
  1409                           
  1410 ;; *************** function _BitIntr *****************
  1411 ;; Defined at:
  1412 ;;		line 73 in file "user.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;		None
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;		None
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      void 
  1419 ;; Registers used:
  1420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1421 ;; Tracked objects:
  1422 ;;		On entry : 0/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMMON   BANK0
  1426 ;;      Params:         0       0
  1427 ;;      Locals:         0       0
  1428 ;;      Temps:          0       1
  1429 ;;      Totals:         0       1
  1430 ;;Total ram usage:        1 bytes
  1431 ;; Hardware stack levels used:    2
  1432 ;; This function calls:
  1433 ;;		Nothing
  1434 ;; This function is called by:
  1435 ;;		_ISR
  1436 ;; This function uses a non-reentrant model
  1437 ;;
  1438                           psect	text8,local,class=CODE,delta=2,merge=1,group=0
  1439                           	line	73
  1440                           global __ptext8
  1441                           __ptext8:	;psect for function _BitIntr
  1442  001C                     psect	text8
  1443                           	file	"user.c"
  1444                           	line	73
  1445                           	global	__size_of_BitIntr
  1446                           	__size_of_BitIntr	equ	__end_of_BitIntr-_BitIntr
  1447  0088                     	
  1448                           _BitIntr:	
  1449  001C                     ;incstack = 0
  1450                           	opt	stack 3
  1451                           ; Regs used in _BitIntr: [wreg-fsr0h+status,2+status,0+pclath]
  1452                           	line	76
  1453                           	
  1454                           i1l819:	
  1455  001C                     ;user.c: 76:     Data = (Data<<1) | RA0;
  1456                           	clrc
  1457  001C  1003               	bcf	status, 5	;RP0=0, select bank0
  1458  001D  1283               	btfsc	(40/8),(40)&7	;volatile
  1459  001E  1805               	setc
  1460  001F  1403               	rlf	(_Data),f
  1461  0020  0DA2               	line	79
  1462                           	
  1463                           i1l821:	
  1464  0021                     ;user.c: 79:     T1CONbits.TMR1ON = 0;
  1465                           	bcf	(16),0	;volatile
  1466  0021  1010               	line	81
  1467                           	
  1468                           i1l823:	
  1469  0022                     ;user.c: 81:     if (DataState==DATA_SYNC)
  1470                           	movf	((_DataState)),w
  1471  0022  0821               	btfss	status,2
  1472  0023  1D03               	goto	u16_21
  1473  0024  2826               	goto	u16_20
  1474  0025  2827               u16_21:
  1475  0026                     	goto	i1l835
  1476  0026  283E               u16_20:
  1477  0027                     	line	84
  1478                           	
  1479                           i1l825:	
  1480  0027                     ;user.c: 82:     {;user.c: 84:         TickCount = 0;
  1481                           	clrf	(_TickCount)
  1482  0027  01A8               	line	88
  1483                           	
  1484                           i1l827:	
  1485  0028                     ;user.c: 88:         if (++BitCount==4)
  1486                           	movlw	low(01h)
  1487  0028  3001               	movwf	(??_BitIntr+0)+0
  1488  0029  00A9               	movf	(??_BitIntr+0)+0,w
  1489  002A  0829               	addwf	(_BitCount),f
  1490  002B  07A7               		movlw	4
  1491  002C  3004               	xorwf	(((_BitCount))),w
  1492  002D  0627               	btfss	status,2
  1493  002E  1D03               	goto	u17_21
  1494  002F  2831               	goto	u17_20
  1495  0030  2832               u17_21:
  1496  0031                     	goto	i1l79
  1497  0031  28A3               u17_20:
  1498  0032                     	line	90
  1499                           	
  1500                           i1l829:	
  1501  0032                     ;user.c: 89:         {;user.c: 90:              if (Data==0x9)
  1502                           		movlw	9
  1503  0032  3009               	xorwf	((_Data)),w
  1504  0033  0622               	btfss	status,2
  1505  0034  1D03               	goto	u18_21
  1506  0035  2837               	goto	u18_20
  1507  0036  2838               u18_21:
  1508  0037                     	goto	i1l79
  1509  0037  28A3               u18_20:
  1510  0038                     	line	92
  1511                           	
  1512                           i1l831:	
  1513  0038                     ;user.c: 91:              {;user.c: 92:                 Data = 0;
  1514                           	clrf	(_Data)
  1515  0038  01A2               	line	93
  1516                           	
  1517                           i1l833:	
  1518  0039                     ;user.c: 93:                 DataState = DATA_ADDRESS;
  1519                           	clrf	(_DataState)
  1520  0039  01A1               	incf	(_DataState),f
  1521  003A  0AA1               	goto	i1l79
  1522  003B  28A3               	line	94
  1523                           ;user.c: 94:              }
  1524                           	
  1525                           i1l65:	
  1526  003C                     	goto	i1l79
  1527  003C  28A3               	line	95
  1528                           ;user.c: 95:         }
  1529                           	
  1530                           i1l64:	
  1531  003D                     	line	96
  1532                           ;user.c: 96:     }
  1533                           	goto	i1l79
  1534  003D  28A3               	line	97
  1535                           ;user.c: 97:     else if (DataState==DATA_ADDRESS)
  1536                           	
  1537                           i1l63:	
  1538  003E                     	
  1539                           i1l835:	
  1540  003E                     		decf	((_DataState)),w
  1541  003E  0321               	btfss	status,2
  1542  003F  1D03               	goto	u19_21
  1543  0040  2842               	goto	u19_20
  1544  0041  2843               u19_21:
  1545  0042                     	goto	i1l847
  1546  0042  2862               u19_20:
  1547  0043                     	line	100
  1548                           	
  1549                           i1l837:	
  1550  0043                     ;user.c: 98:     {;user.c: 100:         if (++BitCount==5)
  1551                           	movlw	low(01h)
  1552  0043  3001               	movwf	(??_BitIntr+0)+0
  1553  0044  00A9               	movf	(??_BitIntr+0)+0,w
  1554  0045  0829               	addwf	(_BitCount),f
  1555  0046  07A7               		movlw	5
  1556  0047  3005               	xorwf	(((_BitCount))),w
  1557  0048  0627               	btfss	status,2
  1558  0049  1D03               	goto	u20_21
  1559  004A  284C               	goto	u20_20
  1560  004B  284D               u20_21:
  1561  004C                     	goto	i1l79
  1562  004C  28A3               u20_20:
  1563  004D                     	line	102
  1564                           	
  1565                           i1l839:	
  1566  004D                     ;user.c: 101:         {;user.c: 102:             if (Data==BOX_ADDRESS)
  1567                           	movlw	low((_BOX_ADDRESS-__stringbase))
  1568  004D  3001               	movwf	fsr0
  1569  004E  0084               	fcall	stringdir
  1570  004F  20F8               	movwf	(??_BitIntr+0)+0
  1571  0050  00A9               	movf	(_Data),w
  1572  0051  0822               	xorwf	(??_BitIntr+0)+0,w
  1573  0052  0629               	skipz
  1574  0053  1D03               	goto	u21_21
  1575  0054  2856               	goto	u21_20
  1576  0055  2857               u21_21:
  1577  0056                     	goto	i1l843
  1578  0056  285A               u21_20:
  1579  0057                     	line	103
  1580                           	
  1581                           i1l841:	
  1582  0057                     ;user.c: 103:                 Addressed = 1;
  1583                           	clrf	(_Addressed)
  1584  0057  01A0               	incf	(_Addressed),f
  1585  0058  0AA0               	goto	i1l845
  1586  0059  285C               	line	104
  1587                           ;user.c: 104:             else
  1588                           	
  1589                           i1l69:	
  1590  005A                     	line	105
  1591                           	
  1592                           i1l843:	
  1593  005A                     ;user.c: 105:                 Addressed = 0;
  1594                           	clrf	(_Addressed)
  1595  005A  01A0               	goto	i1l845
  1596  005B  285C               	
  1597                           i1l70:	
  1598  005C                     	line	107
  1599                           	
  1600                           i1l845:	
  1601  005C                     ;user.c: 107:             DataState = DATA_SIZE;
  1602                           	movlw	low(02h)
  1603  005C  3002               	movwf	(??_BitIntr+0)+0
  1604  005D  00A9               	movf	(??_BitIntr+0)+0,w
  1605  005E  0829               	movwf	(_DataState)
  1606  005F  00A1               	goto	i1l79
  1607  0060  28A3               	line	108
  1608                           ;user.c: 108:         }
  1609                           	
  1610                           i1l68:	
  1611  0061                     	line	109
  1612                           ;user.c: 109:     }
  1613                           	goto	i1l79
  1614  0061  28A3               	line	110
  1615                           ;user.c: 110:     else if (DataState==DATA_SIZE)
  1616                           	
  1617                           i1l67:	
  1618  0062                     	
  1619                           i1l847:	
  1620  0062                     		movlw	2
  1621  0062  3002               	xorwf	((_DataState)),w
  1622  0063  0621               	btfss	status,2
  1623  0064  1D03               	goto	u22_21
  1624  0065  2867               	goto	u22_20
  1625  0066  2868               u22_21:
  1626  0067                     	goto	i1l855
  1627  0067  2882               u22_20:
  1628  0068                     	line	113
  1629                           	
  1630                           i1l849:	
  1631  0068                     ;user.c: 111:     {;user.c: 113:         if (++BitCount==5)
  1632                           	movlw	low(01h)
  1633  0068  3001               	movwf	(??_BitIntr+0)+0
  1634  0069  00A9               	movf	(??_BitIntr+0)+0,w
  1635  006A  0829               	addwf	(_BitCount),f
  1636  006B  07A7               		movlw	5
  1637  006C  3005               	xorwf	(((_BitCount))),w
  1638  006D  0627               	btfss	status,2
  1639  006E  1D03               	goto	u23_21
  1640  006F  2871               	goto	u23_20
  1641  0070  2872               u23_21:
  1642  0071                     	goto	i1l79
  1643  0071  28A3               u23_20:
  1644  0072                     	line	115
  1645                           	
  1646                           i1l851:	
  1647  0072                     ;user.c: 114:         {;user.c: 115:             if (Data < 31)
  1648                           	movlw	low(01Fh)
  1649  0072  301F               	subwf	(_Data),w
  1650  0073  0222               	skipnc
  1651  0074  1803               	goto	u24_21
  1652  0075  2877               	goto	u24_20
  1653  0076  2878               u24_21:
  1654  0077                     	goto	i1l74
  1655  0077  287C               u24_20:
  1656  0078                     	line	116
  1657                           	
  1658                           i1l853:	
  1659  0078                     ;user.c: 116:                 BoxSize = Data;
  1660                           	movf	(_Data),w
  1661  0078  0822               	movwf	(??_BitIntr+0)+0
  1662  0079  00A9               	movf	(??_BitIntr+0)+0,w
  1663  007A  0829               	movwf	(_BoxSize)
  1664  007B  00A4               	
  1665                           i1l74:	
  1666  007C                     	line	118
  1667                           ;user.c: 118:             DataState = DATA_LAMPS;
  1668                           	movlw	low(03h)
  1669  007C  3003               	movwf	(??_BitIntr+0)+0
  1670  007D  00A9               	movf	(??_BitIntr+0)+0,w
  1671  007E  0829               	movwf	(_DataState)
  1672  007F  00A1               	goto	i1l79
  1673  0080  28A3               	line	119
  1674                           ;user.c: 119:         }
  1675                           	
  1676                           i1l73:	
  1677  0081                     	line	120
  1678                           ;user.c: 120:     }
  1679                           	goto	i1l79
  1680  0081  28A3               	line	121
  1681                           ;user.c: 121:     else if (DataState==DATA_LAMPS)
  1682                           	
  1683                           i1l72:	
  1684  0082                     	
  1685                           i1l855:	
  1686  0082                     		movlw	3
  1687  0082  3003               	xorwf	((_DataState)),w
  1688  0083  0621               	btfss	status,2
  1689  0084  1D03               	goto	u25_21
  1690  0085  2887               	goto	u25_20
  1691  0086  2888               u25_21:
  1692  0087                     	goto	i1l79
  1693  0087  28A3               u25_20:
  1694  0088                     	line	125
  1695                           	
  1696                           i1l857:	
  1697  0088                     ;user.c: 122:     {;user.c: 125:         if (Addressed==1)
  1698                           		decf	((_Addressed)),w
  1699  0088  0320               	btfss	status,2
  1700  0089  1D03               	goto	u26_21
  1701  008A  288C               	goto	u26_20
  1702  008B  288D               u26_21:
  1703  008C                     	goto	i1l861
  1704  008C  2892               u26_20:
  1705  008D                     	line	126
  1706                           	
  1707                           i1l859:	
  1708  008D                     ;user.c: 126:             Lamps = Data;
  1709                           	movf	(_Data),w
  1710  008D  0822               	movwf	(??_BitIntr+0)+0
  1711  008E  00A9               	movf	(??_BitIntr+0)+0,w
  1712  008F  0829               	movwf	(_Lamps)
  1713  0090  00A3               	goto	i1l861
  1714  0091  2892               	
  1715                           i1l77:	
  1716  0092                     	line	128
  1717                           	
  1718                           i1l861:	
  1719  0092                     ;user.c: 128:         if (++BitCount==BoxSize)
  1720                           	movlw	low(01h)
  1721  0092  3001               	movwf	(??_BitIntr+0)+0
  1722  0093  00A9               	movf	(??_BitIntr+0)+0,w
  1723  0094  0829               	addwf	(_BitCount),f
  1724  0095  07A7               	movf	((_BitCount)),w
  1725  0096  0827               	xorwf	(_BoxSize),w
  1726  0097  0624               	skipz
  1727  0098  1D03               	goto	u27_21
  1728  0099  289B               	goto	u27_20
  1729  009A  289C               u27_21:
  1730  009B                     	goto	i1l79
  1731  009B  28A3               u27_20:
  1732  009C                     	line	129
  1733                           	
  1734                           i1l863:	
  1735  009C                     ;user.c: 129:             DataState = DATA_ADDRESS;
  1736                           	clrf	(_DataState)
  1737  009C  01A1               	incf	(_DataState),f
  1738  009D  0AA1               	goto	i1l79
  1739  009E  28A3               	
  1740                           i1l78:	
  1741  009F                     	goto	i1l79
  1742  009F  28A3               	line	131
  1743                           ;user.c: 131:     }
  1744                           	
  1745                           i1l76:	
  1746  00A0                     	goto	i1l79
  1747  00A0  28A3               	
  1748                           i1l75:	
  1749  00A1                     	goto	i1l79
  1750  00A1  28A3               	
  1751                           i1l71:	
  1752  00A2                     	goto	i1l79
  1753  00A2  28A3               	
  1754                           i1l66:	
  1755  00A3                     	line	133
  1756                           	
  1757                           i1l79:	
  1758  00A3                     	return
  1759  00A3  0008               	opt stack 0
  1760                           GLOBAL	__end_of_BitIntr
  1761                           	__end_of_BitIntr:
  1762  00A4                     	signat	_BitIntr,89
  1763                           global	___latbits
  1764                           ___latbits	equ	0
  1765  0000                     	global	btemp
  1766                           	btemp set 05Eh
  1767  005E                     
  1768                           	DABS	1,94,2	;btemp
  1769                           	global	wtemp0
  1770                           	wtemp0 set btemp+0
  1771  005E                     	end


Data Sizes:
    Strings     0
    Constant    1
    Data        0
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      7      16

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _Initialise->_StartTickTimer

Critical Paths under _ISR in BANK0

    _ISR->_BitIntr
    _ISR->i1_StartTickTimer

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      23
                         _Initialise
 ---------------------------------------------------------------------------------
 (1) _Initialise                                           0     0      0      23
                        _BitDataInit
                     _StartTickTimer
 ---------------------------------------------------------------------------------
 (2) _StartTickTimer                                       1     1      0      23
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BitDataInit                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  5     5      0      23
                                              1 BANK0      5     5      0
                            _BitIntr
                           _EdgeIntr
                         _SendModule
                   i1_StartTickTimer
 ---------------------------------------------------------------------------------
 (4) i1_StartTickTimer                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _SendModule                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _EdgeIntr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _BitIntr                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Initialise
     _BitDataInit
     _StartTickTimer

 _ISR (ROOT)
   _BitIntr
   _EdgeIntr
   _SendModule
   i1_StartTickTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      7      10       4       25.8%
ABS                  0      0      10       5        0.0%
DATA                 0      0      10       6        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Oct 21 17:45:15 2018

                        l9 0108                          pc 0002                __CFG_CP$OFF 0000  
                       l10 0108                         l11 0109                         l12 0109  
                       l21 0112                         l54 010E                         l57 00E4  
                       fsr 0004                        l801 00DE                        l803 00DF  
                      l811 0111                        l805 010A                        l807 010F  
                      l809 0110                        l791 00D7                        l793 00D8  
                      l881 0105                        l795 00D9                        l883 0106  
                      l797 00DA                        l789 00D2                        l799 00DC  
                      _RA0 0028               __CFG_CPD$OFF 0000                        _ISR 00A4  
                      fsr0 0004               __CFG_FOSC$EC 0000                       ?_ISR 0029  
                     i1l60 0104                       i1l70 005C                       i1l71 00A2  
                     i1l63 003E                       i1l72 0082                       i1l64 003D  
                     i1l73 0081                       i1l65 003C                       i1l57 00F7  
                     i1l66 00A3                       i1l74 007C                       i1l82 0113  
                     i1l75 00A1                       i1l67 0062                       i1l76 00A0  
                     i1l68 0061                       i1l77 0092                       i1l69 005A  
                     i1l78 009F                       i1l79 00A3                       i1l99 00BA  
                     _Data 0022                       _Sync 0026                       _main 0105  
                     btemp 005E                       start 000F            __end_of_BitIntr 00A4  
            __CFG_MCLRE$ON 0000                _BitDataInit 010A                      ??_ISR 002A  
                    ?_main 0029              __CFG_WDTE$OFF 0000                      i1l100 00B3  
                    i1l101 00B9                      i1l102 00C0                      i1l103 00C6  
                    i1l104 00C6                      i1l821 0021                      i1l813 00FF  
                    i1l901 00C0                      i1l831 0038                      i1l823 0022  
                    i1l815 0102                      i1l903 00C4                      i1l841 0057  
                    i1l833 0039                      i1l825 0027                      i1l817 0103  
                    i1l851 0072                      i1l843 005A                      i1l827 0028  
                    i1l835 003E                      i1l819 001C                      i1l861 0092  
                    i1l853 0078                      i1l845 005C                      i1l837 0043  
                    i1l829 0032                      i1l863 009C                      i1l855 0082  
                    i1l839 004D                      i1l847 0062                      i1l871 00EC  
                    i1l857 0088                      i1l849 0068                      i1l873 00ED  
                    i1l865 00E5                      i1l859 008D                      i1l875 00EF  
                    i1l867 00EA                      i1l891 00B0                      i1l877 00F1  
                    i1l869 00EB                      i1l893 00B1                      i1l885 00A4  
                    i1l879 00F2                      i1l895 00B3                      i1l887 00A8  
                    i1l889 00A9                      i1l897 00BA                      i1l899 00BE  
                    u20_20 004D                      u20_21 004C                      u21_20 0057  
                    u21_21 0056                      u22_20 0068                      u30_20 00BE  
                    u22_21 0067                      u30_21 00BD                      u23_20 0072  
                    u31_20 00C4                      u23_21 0071                      u31_21 00C3  
                    u24_20 0078                      u16_20 0027                      u24_21 0077  
                    u16_21 0026                      u25_20 0088                      u17_20 0032  
                    u25_21 0087                      u17_21 0031                      _TMR1H 000F  
                    _TMR1L 000E                      u26_20 008D                      u18_20 0038  
                    u26_21 008C                      u18_21 0037                      u27_20 009C  
                    u19_20 0043                      u27_21 009B                      u19_21 0042  
                    u28_20 00A8                      u28_21 00A7                      u29_20 00B0  
                    u29_21 00AF                      _Lamps 0023           i1_StartTickTimer 00E5  
           __CFG_BOREN$OFF 0000                      pclath 000A                      status 0003  
         __end_of_EdgeIntr 0105                      wtemp0 005E            __initialization 0010  
             __end_of_main 010A                 _Initialise 010F                     ??_main 0000  
               _SendModule 0113                  ??_BitIntr 0029           ??_StartTickTimer 0000  
           __CFG_PWRTE$OFF 0000                     saved_w 005E    __end_of__initialization 001A  
           __pcstackCOMMON 0000                ?_Initialise 0029                  ?_EdgeIntr 0029  
              ?_SendModule 0029                 __pbssBANK0 0020                 __pmaintext 0105  
             ?_BitDataInit 0029   __end_ofi1_StartTickTimer 00F8                 __pintentry 0004  
               ??_EdgeIntr 0000                 __stringtab 00F8                    _Address 0025  
                  _BitIntr 001C        __size_of_Initialise 0004                    _BoxSize 0024  
      __size_of_SendModule 0001                    __ptext1 010F                    __ptext2 00D2  
                  __ptext3 010A                    __ptext4 00A4                    __ptext5 00E5  
                  __ptext6 0113                    __ptext7 00FF                    __ptext8 001C  
             __size_of_ISR 002E                  _T1CONbits 0010       end_of_initialization 001A  
  StartTickTimer@IntEnable 002F  i1StartTickTimer@IntEnable 0029                  _Addressed 0020  
                _DataState 0021               ??_Initialise 0000       __size_of_BitDataInit 0005  
      start_initialization 0010                __end_of_ISR 00D2          __size_of_EdgeIntr 0006  
             ??_SendModule 0000         __end_of_Initialise 0113                  _TickCount 0028  
      __end_of_BOX_ADDRESS 00FF          ?i1_StartTickTimer 0029    __size_of_StartTickTimer 0013  
       __end_of_SendModule 0114         ??i1_StartTickTimer 0000                  ___latbits 0000  
            __pcstackBANK0 0029                   ?_BitIntr 0029                  __pstrings 00F8  
        interrupt_function 0004                _BOX_ADDRESS 00FE                __stringbase 00FD  
                 _EdgeIntr 00FF                   _BitCount 0027           __size_of_BitIntr 0088  
           _StartTickTimer 00D2         __end_of__stringtab 00FE              __size_of_main 0005  
   __end_of_StartTickTimer 00E5              ??_BitDataInit 0000                 _INTCONbits 000B  
__size_ofi1_StartTickTimer 0013                   intlevel1 0000                  stringcode 00F8  
          ?_StartTickTimer 0029        __end_of_BitDataInit 010F                   stringdir 00F8  
                 stringtab 00F8  
