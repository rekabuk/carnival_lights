

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Oct 29 17:06:38 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F630 Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   100                           PORTC equ 07h ;# 
   101  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   102                           PCLATH equ 0Ah ;# 
   103  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   104                           INTCON equ 0Bh ;# 
   105  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   106                           PIR1 equ 0Ch ;# 
   107  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   108                           TMR1 equ 0Eh ;# 
   109  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   110                           TMR1L equ 0Eh ;# 
   111  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   112                           TMR1H equ 0Fh ;# 
   113  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   114                           T1CON equ 010h ;# 
   115  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   116                           CMCON equ 019h ;# 
   117  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   118                           OPTION_REG equ 081h ;# 
   119  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   120                           TRISA equ 085h ;# 
   121  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   122                           TRISC equ 087h ;# 
   123  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   124                           PIE1 equ 08Ch ;# 
   125  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   126                           PCON equ 08Eh ;# 
   127  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   128                           OSCCAL equ 090h ;# 
   129  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   130                           WPUA equ 095h ;# 
   131  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   132                           WPU equ 095h ;# 
   133  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   134                           IOCA equ 096h ;# 
   135  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   136                           IOC equ 096h ;# 
   137  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   138                           VRCON equ 099h ;# 
   139  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   140                           EEDAT equ 09Ah ;# 
   141  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   142                           EEDATA equ 09Ah ;# 
   143  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   144                           EEADR equ 09Bh ;# 
   145  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   146                           EECON1 equ 09Ch ;# 
   147  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   148                           EECON2 equ 09Dh ;# 
   149  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   150                           INDF equ 00h ;# 
   151  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   152                           TMR0 equ 01h ;# 
   153  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   154                           PCL equ 02h ;# 
   155  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   156                           STATUS equ 03h ;# 
   157  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   158                           FSR equ 04h ;# 
   159  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   160                           PORTA equ 05h ;# 
   161  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   162                           PORTC equ 07h ;# 
   163  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   164                           PCLATH equ 0Ah ;# 
   165  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   166                           INTCON equ 0Bh ;# 
   167  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   168                           PIR1 equ 0Ch ;# 
   169  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   170                           TMR1 equ 0Eh ;# 
   171  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   172                           TMR1L equ 0Eh ;# 
   173  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   174                           TMR1H equ 0Fh ;# 
   175  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   176                           T1CON equ 010h ;# 
   177  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   178                           CMCON equ 019h ;# 
   179  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   180                           OPTION_REG equ 081h ;# 
   181  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   182                           TRISA equ 085h ;# 
   183  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   184                           TRISC equ 087h ;# 
   185  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   186                           PIE1 equ 08Ch ;# 
   187  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   188                           PCON equ 08Eh ;# 
   189  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   190                           OSCCAL equ 090h ;# 
   191  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   192                           WPUA equ 095h ;# 
   193  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   194                           WPU equ 095h ;# 
   195  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   196                           IOCA equ 096h ;# 
   197  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   198                           IOC equ 096h ;# 
   199  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   200                           VRCON equ 099h ;# 
   201  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   202                           EEDAT equ 09Ah ;# 
   203  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   204                           EEDATA equ 09Ah ;# 
   205  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   206                           EEADR equ 09Bh ;# 
   207  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   208                           EECON1 equ 09Ch ;# 
   209  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   210                           EECON2 equ 09Dh ;# 
   211  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   212                           INDF equ 00h ;# 
   213  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   214                           TMR0 equ 01h ;# 
   215  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   216                           PCL equ 02h ;# 
   217  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   218                           STATUS equ 03h ;# 
   219  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   220                           FSR equ 04h ;# 
   221  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   222                           PORTA equ 05h ;# 
   223  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   224                           PORTC equ 07h ;# 
   225  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   226                           PCLATH equ 0Ah ;# 
   227  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   228                           INTCON equ 0Bh ;# 
   229  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   230                           PIR1 equ 0Ch ;# 
   231  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   232                           TMR1 equ 0Eh ;# 
   233  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   234                           TMR1L equ 0Eh ;# 
   235  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   236                           TMR1H equ 0Fh ;# 
   237  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   238                           T1CON equ 010h ;# 
   239  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   240                           CMCON equ 019h ;# 
   241  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   242                           OPTION_REG equ 081h ;# 
   243  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   244                           TRISA equ 085h ;# 
   245  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   246                           TRISC equ 087h ;# 
   247  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   248                           PIE1 equ 08Ch ;# 
   249  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   250                           PCON equ 08Eh ;# 
   251  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   252                           OSCCAL equ 090h ;# 
   253  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   254                           WPUA equ 095h ;# 
   255  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   256                           WPU equ 095h ;# 
   257  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   258                           IOCA equ 096h ;# 
   259  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   260                           IOC equ 096h ;# 
   261  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   262                           VRCON equ 099h ;# 
   263  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   264                           EEDAT equ 09Ah ;# 
   265  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   266                           EEDATA equ 09Ah ;# 
   267  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   268                           EEADR equ 09Bh ;# 
   269  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   270                           EECON1 equ 09Ch ;# 
   271  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   272                           EECON2 equ 09Dh ;# 
   273  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   274                           INDF equ 00h ;# 
   275  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   276                           TMR0 equ 01h ;# 
   277  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   278                           PCL equ 02h ;# 
   279  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   280                           STATUS equ 03h ;# 
   281  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   282                           FSR equ 04h ;# 
   283  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   284                           PORTA equ 05h ;# 
   285  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   286                           PORTC equ 07h ;# 
   287  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   288                           PCLATH equ 0Ah ;# 
   289  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   290                           INTCON equ 0Bh ;# 
   291  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   292                           PIR1 equ 0Ch ;# 
   293  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   294                           TMR1 equ 0Eh ;# 
   295  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   296                           TMR1L equ 0Eh ;# 
   297  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   298                           TMR1H equ 0Fh ;# 
   299  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   300                           T1CON equ 010h ;# 
   301  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   302                           CMCON equ 019h ;# 
   303  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   304                           OPTION_REG equ 081h ;# 
   305  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   306                           TRISA equ 085h ;# 
   307  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   308                           TRISC equ 087h ;# 
   309  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   310                           PIE1 equ 08Ch ;# 
   311  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   312                           PCON equ 08Eh ;# 
   313  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   314                           OSCCAL equ 090h ;# 
   315  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   316                           WPUA equ 095h ;# 
   317  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   318                           WPU equ 095h ;# 
   319  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   320                           IOCA equ 096h ;# 
   321  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   322                           IOC equ 096h ;# 
   323  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   324                           VRCON equ 099h ;# 
   325  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   326                           EEDAT equ 09Ah ;# 
   327  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   328                           EEDATA equ 09Ah ;# 
   329  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   330                           EEADR equ 09Bh ;# 
   331  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   332                           EECON1 equ 09Ch ;# 
   333  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   334                           EECON2 equ 09Dh ;# 
   335  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   336                           INDF equ 00h ;# 
   337  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   338                           TMR0 equ 01h ;# 
   339  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   340                           PCL equ 02h ;# 
   341  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   342                           STATUS equ 03h ;# 
   343  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   344                           FSR equ 04h ;# 
   345  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   346                           PORTA equ 05h ;# 
   347  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   348                           PORTC equ 07h ;# 
   349  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   350                           PCLATH equ 0Ah ;# 
   351  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   352                           INTCON equ 0Bh ;# 
   353  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   354                           PIR1 equ 0Ch ;# 
   355  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   356                           TMR1 equ 0Eh ;# 
   357  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   358                           TMR1L equ 0Eh ;# 
   359  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   360                           TMR1H equ 0Fh ;# 
   361  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   362                           T1CON equ 010h ;# 
   363  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   364                           CMCON equ 019h ;# 
   365  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   366                           OPTION_REG equ 081h ;# 
   367  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   368                           TRISA equ 085h ;# 
   369  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   370                           TRISC equ 087h ;# 
   371  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   372                           PIE1 equ 08Ch ;# 
   373  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   374                           PCON equ 08Eh ;# 
   375  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   376                           OSCCAL equ 090h ;# 
   377  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   378                           WPUA equ 095h ;# 
   379  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   380                           WPU equ 095h ;# 
   381  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   382                           IOCA equ 096h ;# 
   383  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   384                           IOC equ 096h ;# 
   385  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   386                           VRCON equ 099h ;# 
   387  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   388                           EEDAT equ 09Ah ;# 
   389  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   390                           EEDATA equ 09Ah ;# 
   391  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   392                           EEADR equ 09Bh ;# 
   393  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   394                           EECON1 equ 09Ch ;# 
   395  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   396                           EECON2 equ 09Dh ;# 
   397  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   398                           INDF equ 00h ;# 
   399  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   400                           TMR0 equ 01h ;# 
   401  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   402                           PCL equ 02h ;# 
   403  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   404                           STATUS equ 03h ;# 
   405  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   406                           FSR equ 04h ;# 
   407  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   408                           PORTA equ 05h ;# 
   409  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   410                           PORTC equ 07h ;# 
   411  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   412                           PCLATH equ 0Ah ;# 
   413  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   414                           INTCON equ 0Bh ;# 
   415  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   416                           PIR1 equ 0Ch ;# 
   417  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   418                           TMR1 equ 0Eh ;# 
   419  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   420                           TMR1L equ 0Eh ;# 
   421  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   422                           TMR1H equ 0Fh ;# 
   423  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   424                           T1CON equ 010h ;# 
   425  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   426                           CMCON equ 019h ;# 
   427  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   428                           OPTION_REG equ 081h ;# 
   429  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   430                           TRISA equ 085h ;# 
   431  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   432                           TRISC equ 087h ;# 
   433  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   434                           PIE1 equ 08Ch ;# 
   435  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   436                           PCON equ 08Eh ;# 
   437  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   438                           OSCCAL equ 090h ;# 
   439  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   440                           WPUA equ 095h ;# 
   441  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   442                           WPU equ 095h ;# 
   443  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   444                           IOCA equ 096h ;# 
   445  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   446                           IOC equ 096h ;# 
   447  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   448                           VRCON equ 099h ;# 
   449  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   450                           EEDAT equ 09Ah ;# 
   451  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   452                           EEDATA equ 09Ah ;# 
   453  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   454                           EEADR equ 09Bh ;# 
   455  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   456                           EECON1 equ 09Ch ;# 
   457  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   458                           EECON2 equ 09Dh ;# 
   459  009D                     	FNCALL	_main,_BitDataInit
   460                           	FNCALL	_main,_Initialise
   461                           	FNROOT	_main
   462                           	FNCALL	_ISR,_BitIntr
   463                           	FNCALL	_ISR,_EdgeIntr
   464                           	FNCALL	_ISR,_SendModule
   465                           	FNCALL	_ISR,_StartTickTimer
   466                           	FNCALL	_StartTickTimer,_BitDataInit
   467                           	FNCALL	intlevel1,_ISR
   468                           	global	intlevel1
   469                           	FNROOT	intlevel1
   470                           	global	_BOX_ADDRESS
   471                           psect	strings,class=STRING,delta=2,noexec
   472                           global __pstrings
   473                           __pstrings:
   474  0128                     stringtab:
   475  0128                     	global    __stringtab
   476                           __stringtab:
   477  0128                     ;	String table - string pointers are 1 byte each
   478                           stringcode:stringdir:
   479  0128                     movlw high(stringdir)
      + 0128                     stringdir:	
   480  0128  3001               movwf pclath
   481  0129  008A               movf fsr,w
   482  012A  0804               incf fsr
   483  012B  0A84               	addwf pc
   484  012C  0782               	global __stringbase
   485                           __stringbase:
   486  012D                     	retlw	0
   487  012D  3400               psect	strings
   488                           	global    __end_of__stringtab
   489                           __end_of__stringtab:
   490  012E                     	file	"main.c"
   491                           	line	7
   492                           _BOX_ADDRESS:
   493  012E                     	retlw	03h
   494  012E  3403               	global __end_of_BOX_ADDRESS
   495                           __end_of_BOX_ADDRESS:
   496  012F                     	global	_BOX_ADDRESS
   497                           	global	_TickCount
   498                           	global	_EdgeDetect
   499                           	global	_Addressed
   500                           	global	_DataState
   501                           	global	_Lamps
   502                           	global	_BoxSize
   503                           	global	_BitCount
   504                           	global	_IntrData
   505                           	global	_RxData
   506                           	global	_IntrNewBit
   507                           	global	_TMR0
   508                           _TMR0	set	0x1
   509  0001                     	global	_PIR1bits
   510                           _PIR1bits	set	0xC
   511  000C                     	global	_TMR1L
   512                           _TMR1L	set	0xE
   513  000E                     	global	_TMR1H
   514                           _TMR1H	set	0xF
   515  000F                     	global	_T1CONbits
   516                           _T1CONbits	set	0x10
   517  0010                     	global	_CMCON
   518                           _CMCON	set	0x19
   519  0019                     	global	_INTCONbits
   520                           _INTCONbits	set	0xB
   521  000B                     	global	_RA2
   522                           _RA2	set	0x2A
   523  002A                     	global	_RC3
   524                           _RC3	set	0x3B
   525  003B                     	global	_RC5
   526                           _RC5	set	0x3D
   527  003D                     	global	_RC1
   528                           _RC1	set	0x39
   529  0039                     	global	_PIE1bits
   530                           _PIE1bits	set	0x8C
   531  008C                     	global	_TRISC
   532                           _TRISC	set	0x87
   533  0087                     	global	_OPTION_REGbits
   534                           _OPTION_REGbits	set	0x81
   535  0081                     	global	_TRISA
   536                           _TRISA	set	0x85
   537  0085                     ; #config settings
   538                           global __CFG_FOSC$EC
   539                           __CFG_FOSC$EC equ 0x0
   540  0000                     global __CFG_WDTE$OFF
   541                           __CFG_WDTE$OFF equ 0x0
   542  0000                     global __CFG_PWRTE$OFF
   543                           __CFG_PWRTE$OFF equ 0x0
   544  0000                     global __CFG_MCLRE$OFF
   545                           __CFG_MCLRE$OFF equ 0x0
   546  0000                     global __CFG_BOREN$OFF
   547                           __CFG_BOREN$OFF equ 0x0
   548  0000                     global __CFG_CP$OFF
   549                           __CFG_CP$OFF equ 0x0
   550  0000                     global __CFG_CPD$OFF
   551                           __CFG_CPD$OFF equ 0x0
   552  0000                     	file	"C:\Users\abaker\AppData\Local\Temp\smck."
   553                           	line	#
   554                           psect cinit,class=CODE,delta=2
   555                           global start_initialization
   556                           start_initialization:
   557  000C                     
   558                           global __initialization
   559                           __initialization:
   560  000C                     psect	bssBANK0,class=BANK0,space=1,noexec
   561                           global __pbssBANK0
   562                           __pbssBANK0:
   563  0020                     _TickCount:
   564  0020                            ds      1
   565  0020                     
   566                           _EdgeDetect:
   567  0021                            ds      1
   568  0021                     
   569                           _Addressed:
   570  0022                            ds      1
   571  0022                     
   572                           _DataState:
   573  0023                            ds      1
   574  0023                     
   575                           _Lamps:
   576  0024                            ds      1
   577  0024                     
   578                           _BoxSize:
   579  0025                            ds      1
   580  0025                     
   581                           _Address:
   582  0026                            ds      1
   583  0026                     
   584                           _Sync:
   585  0027                            ds      1
   586  0027                     
   587                           _BitCount:
   588  0028                            ds      1
   589  0028                     
   590                           _IntrData:
   591  0029                            ds      1
   592  0029                     
   593                           _RxData:
   594  002A                            ds      1
   595  002A                     
   596                           _IntrNewBit:
   597  002B                            ds      1
   598  002B                     
   599                           	file	"C:\Users\abaker\AppData\Local\Temp\smck."
   600                           	line	#
   601                           psect clrtext,class=CODE,delta=2
   602                           global clear_ram0
   603                           ;	Called with FSR containing the base address, and
   604                           ;	W with the last address+1
   605                           clear_ram0:
   606  0120                     	clrwdt			;clear the watchdog before getting into this loop
   607  0120  0064               clrloop0:
   608  0121                     	clrf	indf		;clear RAM location pointed to by FSR
   609  0121  0180               	incf	fsr,f		;increment pointer
   610  0122  0A84               	xorwf	fsr,w		;XOR with final address
   611  0123  0604               	btfsc	status,2	;have we reached the end yet?
   612  0124  1903               	retlw	0		;all done for this memory range, return
   613  0125  3400               	xorwf	fsr,w		;XOR again to restore value
   614  0126  0604               	goto	clrloop0		;do the next byte
   615  0127  2921               
   616                           ; Clear objects allocated to BANK0
   617                           psect cinit,class=CODE,delta=2,merge=1
   618                           	bcf	status, 7	;select IRP bank0
   619  000C  1383               	movlw	low(__pbssBANK0)
   620  000D  3020               	movwf	fsr
   621  000E  0084               	movlw	low((__pbssBANK0)+0Ch)
   622  000F  302C               	fcall	clear_ram0
   623  0010  2120               psect cinit,class=CODE,delta=2,merge=1
   624                           global end_of_initialization,__end_of__initialization
   625                           
   626                           ;End of C runtime variable initialization code
   627                           
   628                           end_of_initialization:
   629  0011                     __end_of__initialization:
   630  0011                     clrf status
   631  0011  0183               ljmp _main	;jump to C main() function
   632  0012  2813               psect	cstackCOMMON,class=COMMON,space=1,noexec
   633                           global __pcstackCOMMON
   634                           __pcstackCOMMON:
   635  0000                     ??_Initialise:	; 1 bytes @ 0x0
   636  0000                     ??_BitDataInit:	; 1 bytes @ 0x0
   637  0000                     ??_EdgeIntr:	; 1 bytes @ 0x0
   638  0000                     ??_BitIntr:	; 1 bytes @ 0x0
   639  0000                     ??_SendModule:	; 1 bytes @ 0x0
   640  0000                     psect	cstackBANK0,class=BANK0,space=1,noexec
   641                           global __pcstackBANK0
   642                           __pcstackBANK0:
   643  002C                     ?_Initialise:	; 1 bytes @ 0x0
   644  002C                     ?_BitDataInit:	; 1 bytes @ 0x0
   645  002C                     ?_main:	; 1 bytes @ 0x0
   646  002C                     ?_StartTickTimer:	; 1 bytes @ 0x0
   647  002C                     ?_EdgeIntr:	; 1 bytes @ 0x0
   648  002C                     ?_BitIntr:	; 1 bytes @ 0x0
   649  002C                     ?_SendModule:	; 1 bytes @ 0x0
   650  002C                     ?_ISR:	; 1 bytes @ 0x0
   651  002C                     	global	BitDataInit@ModeTx
   652                           BitDataInit@ModeTx:	; 1 bytes @ 0x0
   653  002C                     	ds	1
   654  002C                     	global	BitDataInit@IntEnable
   655                           BitDataInit@IntEnable:	; 1 bytes @ 0x1
   656  002D                     	ds	1
   657  002D                     ??_StartTickTimer:	; 1 bytes @ 0x2
   658  002E                     	ds	1
   659  002E                     ??_ISR:	; 1 bytes @ 0x3
   660  002F                     	ds	3
   661  002F                     ??_main:	; 1 bytes @ 0x6
   662  0032                     	ds	1
   663  0032                     ;!
   664                           ;!Data Sizes:
   665                           ;!    Strings     0
   666                           ;!    Constant    1
   667                           ;!    Data        0
   668                           ;!    BSS         12
   669                           ;!    Persistent  0
   670                           ;!    Stack       0
   671                           ;!
   672                           ;!Auto Spaces:
   673                           ;!    Space          Size  Autos    Used
   674                           ;!    COMMON            0      0       0
   675                           ;!    BANK0            62      7      19
   676                           
   677                           ;!
   678                           ;!Pointer List with Targets:
   679                           ;!
   680                           ;!    None.
   681                           
   682                           
   683                           ;!
   684                           ;!Critical Paths under _main in COMMON
   685                           ;!
   686                           ;!    None.
   687                           ;!
   688                           ;!Critical Paths under _ISR in COMMON
   689                           ;!
   690                           ;!    None.
   691                           ;!
   692                           ;!Critical Paths under _main in BANK0
   693                           ;!
   694                           ;!    None.
   695                           ;!
   696                           ;!Critical Paths under _ISR in BANK0
   697                           ;!
   698                           ;!    _ISR->_StartTickTimer
   699                           
   700 ;;
   701 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   702 ;;
   703                           
   704                           ;!
   705                           ;!Call Graph Tables:
   706                           ;!
   707                           ;! ---------------------------------------------------------------------------------
   708                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   709                           ;! ---------------------------------------------------------------------------------
   710                           ;! (0) _main                                                 1     1      0      45
   711                           ;!                                              6 BANK0      1     1      0
   712                           ;!                        _BitDataInit
   713                           ;!                         _Initialise
   714                           ;! ---------------------------------------------------------------------------------
   715                           ;! (1) _Initialise                                           0     0      0       0
   716                           ;! ---------------------------------------------------------------------------------
   717                           ;! (4) _BitDataInit                                          2     2      0      45
   718                           ;! ---------------------------------------------------------------------------------
   719                           ;! Estimated maximum stack depth 4
   720                           ;! ---------------------------------------------------------------------------------
   721                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   722                           ;! ---------------------------------------------------------------------------------
   723                           ;! (2) _ISR                                                  3     3      0      45
   724                           ;!                                              3 BANK0      3     3      0
   725                           ;!                            _BitIntr
   726                           ;!                           _EdgeIntr
   727                           ;!                         _SendModule
   728                           ;!                     _StartTickTimer
   729                           ;! ---------------------------------------------------------------------------------
   730                           ;! (3) _StartTickTimer                                       1     1      0      45
   731                           ;!                                              2 BANK0      1     1      0
   732                           ;!                        _BitDataInit
   733                           ;! ---------------------------------------------------------------------------------
   734                           ;! (4) _BitDataInit                                          2     2      0      45
   735                           ;! ---------------------------------------------------------------------------------
   736                           ;! (3) _SendModule                                           0     0      0       0
   737                           ;! ---------------------------------------------------------------------------------
   738                           ;! (3) _EdgeIntr                                             0     0      0       0
   739                           ;! ---------------------------------------------------------------------------------
   740                           ;! (3) _BitIntr                                              0     0      0       0
   741                           ;! ---------------------------------------------------------------------------------
   742                           ;! Estimated maximum stack depth 4
   743                           ;! ---------------------------------------------------------------------------------
   744                           ;!
   745                           ;! Call Graph Graphs:
   746                           ;!
   747                           ;! _main (ROOT)
   748                           ;!   _BitDataInit
   749                           ;!   _Initialise
   750                           ;!
   751                           ;! _ISR (ROOT)
   752                           ;!   _BitIntr
   753                           ;!   _EdgeIntr
   754                           ;!   _SendModule
   755                           ;!   _StartTickTimer
   756                           ;!     _BitDataInit
   757                           ;!
   758                           
   759                           ;! Address spaces:
   760                           
   761                           ;!Name               Size   Autos  Total    Cost      Usage
   762                           ;!BITCOMMON            0      0       0       0        0.0%
   763                           ;!EEDATA              80      0       0       0        0.0%
   764                           ;!NULL                 0      0       0       0        0.0%
   765                           ;!CODE                 0      0       0       0        0.0%
   766                           ;!BITSFR0              0      0       0       1        0.0%
   767                           ;!SFR0                 0      0       0       1        0.0%
   768                           ;!COMMON               0      0       0       1        0.0%
   769                           ;!BITSFR1              0      0       0       2        0.0%
   770                           ;!SFR1                 0      0       0       2        0.0%
   771                           ;!STACK                0      0       0       2        0.0%
   772                           ;!BITBANK0            3E      0       0       3        0.0%
   773                           ;!BANK0               3E      7      13       4       30.6%
   774                           ;!ABS                  0      0      13       5        0.0%
   775                           ;!DATA                 0      0      13       6        0.0%
   776                           
   777                           	global	_main
   778                           
   779 ;; *************** function _main *****************
   780 ;; Defined at:
   781 ;;		line 63 in file "main.c"
   782 ;; Parameters:    Size  Location     Type
   783 ;;		None
   784 ;; Auto vars:     Size  Location     Type
   785 ;;		None
   786 ;; Return value:  Size  Location     Type
   787 ;;                  1    wreg      void 
   788 ;; Registers used:
   789 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   790 ;; Tracked objects:
   791 ;;		On entry : B00/0
   792 ;;		On exit  : 0/0
   793 ;;		Unchanged: 0/0
   794 ;; Data sizes:     COMMON   BANK0
   795 ;;      Params:         0       0
   796 ;;      Locals:         0       0
   797 ;;      Temps:          0       1
   798 ;;      Totals:         0       1
   799 ;;Total ram usage:        1 bytes
   800 ;; Hardware stack levels required when called:    4
   801 ;; This function calls:
   802 ;;		_BitDataInit
   803 ;;		_Initialise
   804 ;; This function is called by:
   805 ;;		Startup code after reset
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   809                           	file	"main.c"
   810                           	line	63
   811                           global __pmaintext
   812                           __pmaintext:	;psect for function _main
   813  0013                     psect	maintext
   814                           	file	"main.c"
   815                           	line	63
   816                           	global	__size_of_main
   817                           	__size_of_main	equ	__end_of_main-_main
   818  0089                     	
   819                           _main:	
   820  0013                     ;incstack = 0
   821                           	opt	stack 4
   822                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   823                           	line	65
   824                           	
   825                           l930:	
   826  0013                     	fcall	_Initialise
   827  0013  20C8               	line	68
   828                           	movlw	low(0)
   829  0014  3000               	fcall	_BitDataInit
   830  0015  20E4               	line	71
   831                           	
   832                           l932:	
   833  0016                     	bsf	(11),7	;volatile
   834  0016  178B               	goto	l934
   835  0017  2818               	line	73
   836                           	
   837                           l42:	
   838  0018                     	line	75
   839                           	
   840                           l934:	
   841  0018                     	bcf	status, 5	;RP0=0, select bank0
   842  0018  1283               		decf	((_IntrNewBit)),w
   843  0019  032B               	btfss	status,2
   844  001A  1D03               	goto	u191
   845  001B  281D               	goto	u190
   846  001C  281E               u191:
   847  001D                     	goto	l934
   848  001D  2818               u190:
   849  001E                     	line	81
   850                           	
   851                           l936:	
   852  001E                     	bcf	(11),5	;volatile
   853  001E  128B               	line	82
   854                           	
   855                           l938:	
   856  001F                     	movf	(_IntrData),w
   857  001F  0829               	movwf	(??_main+0)+0
   858  0020  00B2               	movf	(??_main+0)+0,w
   859  0021  0832               	movwf	(_RxData)
   860  0022  00AA               	line	83
   861                           	
   862                           l940:	
   863  0023                     	clrf	(_IntrNewBit)
   864  0023  01AB               	line	84
   865                           	
   866                           l942:	
   867  0024                     	bcf	(11),5	;volatile
   868  0024  128B               	line	87
   869                           	
   870                           l944:	
   871  0025                     	movlw	low(01h)
   872  0025  3001               	movwf	(??_main+0)+0
   873  0026  00B2               	movf	(??_main+0)+0,w
   874  0027  0832               	addwf	(_BitCount),f
   875  0028  07A8               	line	90
   876                           	
   877                           l946:	
   878  0029                     	movf	((_DataState)),w
   879  0029  0823               	btfss	status,2
   880  002A  1D03               	goto	u201
   881  002B  282D               	goto	u200
   882  002C  282E               u201:
   883  002D                     	goto	l956
   884  002D  283F               u200:
   885  002E                     	line	100
   886                           	
   887                           l948:	
   888  002E                     ;main.c: 100:                 if ((RxData&0xF)==0x09)
   889                           	movlw	low(0Fh)
   890  002E  300F               	andwf	(_RxData),w
   891  002F  052A               	movwf	(??_main+0)+0
   892  0030  00B2               		movlw	9
   893  0031  3009               	xorwf	((??_main+0)+0),w
   894  0032  0632               	btfss	status,2
   895  0033  1D03               	goto	u211
   896  0034  2836               	goto	u210
   897  0035  2837               u211:
   898  0036                     	goto	l934
   899  0036  2818               u210:
   900  0037                     	line	103
   901                           	
   902                           l950:	
   903  0037                     ;main.c: 101:                 {;main.c: 103:                     RC5=1;
   904                           	bsf	(61/8),(61)&7	;volatile
   905  0037  1687               	line	104
   906                           ;main.c: 104:                     RC5=0;
   907                           	bcf	(61/8),(61)&7	;volatile
   908  0038  1287               	line	106
   909                           	
   910                           l952:	
   911  0039                     ;main.c: 106:                     BitCount = 0;
   912                           	clrf	(_BitCount)
   913  0039  01A8               	line	107
   914                           ;main.c: 107:                     Addressed = 0;
   915                           	clrf	(_Addressed)
   916  003A  01A2               	line	108
   917                           	
   918                           l954:	
   919  003B                     ;main.c: 108:                     DataState = DATA_ADDRESS;
   920                           	clrf	(_DataState)
   921  003B  01A3               	incf	(_DataState),f
   922  003C  0AA3               	goto	l934
   923  003D  2818               	line	109
   924                           ;main.c: 109:                 }
   925                           	
   926                           l45:	
   927  003E                     	line	110
   928                           ;main.c: 110:             }
   929                           	goto	l934
   930  003E  2818               	line	111
   931                           ;main.c: 111:             else if (DataState==DATA_ADDRESS)
   932                           	
   933                           l44:	
   934  003F                     	
   935                           l956:	
   936  003F                     		decf	((_DataState)),w
   937  003F  0323               	btfss	status,2
   938  0040  1D03               	goto	u221
   939  0041  2843               	goto	u220
   940  0042  2844               u221:
   941  0043                     	goto	l970
   942  0043  2863               u220:
   943  0044                     	line	114
   944                           	
   945                           l958:	
   946  0044                     ;main.c: 112:             {;main.c: 114:                 if (BitCount>=5)
   947                           	movlw	low(05h)
   948  0044  3005               	subwf	(_BitCount),w
   949  0045  0228               	skipc
   950  0046  1C03               	goto	u231
   951  0047  2849               	goto	u230
   952  0048  284A               u231:
   953  0049                     	goto	l934
   954  0049  2818               u230:
   955  004A                     	line	116
   956                           	
   957                           l960:	
   958  004A                     ;main.c: 115:                 {;main.c: 116:                     BitCount = 0;
   959                           	clrf	(_BitCount)
   960  004A  01A8               	line	118
   961                           	
   962                           l962:	
   963  004B                     ;main.c: 118:                     if ((RxData&0x1F)==BOX_ADDRESS)
   964                           	movlw	low((_BOX_ADDRESS-__stringbase))
   965  004B  3001               	movwf	fsr0
   966  004C  0084               	fcall	stringdir
   967  004D  2128               	movwf	(??_main+0)+0
   968  004E  00B2               	movf	(_RxData),w
   969  004F  082A               	andlw	01Fh
   970  0050  391F               	xorwf	(??_main+0)+0,w
   971  0051  0632               	skipz
   972  0052  1D03               	goto	u241
   973  0053  2855               	goto	u240
   974  0054  2856               u241:
   975  0055                     	goto	l966
   976  0055  285B               u240:
   977  0056                     	line	120
   978                           	
   979                           l964:	
   980  0056                     ;main.c: 119:                     {;main.c: 120:                         Addressed = 1;

   981                           	clrf	(_Addressed)
   982  0056  01A2               	incf	(_Addressed),f
   983  0057  0AA2               	line	121
   984                           ;main.c: 121:                         RC3=1;
   985                           	bsf	(59/8),(59)&7	;volatile
   986  0058  1587               	line	122
   987                           ;main.c: 122:                         RC3=0;
   988                           	bcf	(59/8),(59)&7	;volatile
   989  0059  1187               	line	123
   990                           ;main.c: 123:                     }
   991                           	goto	l968
   992  005A  285D               	line	124
   993                           ;main.c: 124:                     else
   994                           	
   995                           l49:	
   996  005B                     	line	126
   997                           	
   998                           l966:	
   999  005B                     ;main.c: 125:                     {;main.c: 126:                         Addressed = 0;

  1000                           	clrf	(_Addressed)
  1001  005B  01A2               	goto	l968
  1002  005C  285D               	line	127
  1003                           ;main.c: 127:                     }
  1004                           	
  1005                           l50:	
  1006  005D                     	line	129
  1007                           	
  1008                           l968:	
  1009  005D                     ;main.c: 129:                     DataState = DATA_SIZE;
  1010                           	movlw	low(02h)
  1011  005D  3002               	movwf	(??_main+0)+0
  1012  005E  00B2               	movf	(??_main+0)+0,w
  1013  005F  0832               	movwf	(_DataState)
  1014  0060  00A3               	goto	l934
  1015  0061  2818               	line	130
  1016                           ;main.c: 130:                 }
  1017                           	
  1018                           l48:	
  1019  0062                     	line	131
  1020                           ;main.c: 131:             }
  1021                           	goto	l934
  1022  0062  2818               	line	132
  1023                           ;main.c: 132:             else if (DataState==DATA_SIZE)
  1024                           	
  1025                           l47:	
  1026  0063                     	
  1027                           l970:	
  1028  0063                     		movlw	2
  1029  0063  3002               	xorwf	((_DataState)),w
  1030  0064  0623               	btfss	status,2
  1031  0065  1D03               	goto	u251
  1032  0066  2868               	goto	u250
  1033  0067  2869               u251:
  1034  0068                     	goto	l978
  1035  0068  287B               u250:
  1036  0069                     	line	135
  1037                           	
  1038                           l972:	
  1039  0069                     ;main.c: 133:             {;main.c: 135:                 if (BitCount>=5)
  1040                           	movlw	low(05h)
  1041  0069  3005               	subwf	(_BitCount),w
  1042  006A  0228               	skipc
  1043  006B  1C03               	goto	u261
  1044  006C  286E               	goto	u260
  1045  006D  286F               u261:
  1046  006E                     	goto	l934
  1047  006E  2818               u260:
  1048  006F                     	line	137
  1049                           	
  1050                           l974:	
  1051  006F                     ;main.c: 136:                 {;main.c: 137:                     BitCount = 0;
  1052                           	clrf	(_BitCount)
  1053  006F  01A8               	line	139
  1054                           	
  1055                           l976:	
  1056  0070                     ;main.c: 139:                     BoxSize = RxData&0x1F;
  1057                           	movf	(_RxData),w
  1058  0070  082A               	andlw	01Fh
  1059  0071  391F               	movwf	(??_main+0)+0
  1060  0072  00B2               	movf	(??_main+0)+0,w
  1061  0073  0832               	movwf	(_BoxSize)
  1062  0074  00A5               	line	140
  1063                           ;main.c: 140:                     DataState = DATA_LAMPS;
  1064                           	movlw	low(03h)
  1065  0075  3003               	movwf	(??_main+0)+0
  1066  0076  00B2               	movf	(??_main+0)+0,w
  1067  0077  0832               	movwf	(_DataState)
  1068  0078  00A3               	goto	l934
  1069  0079  2818               	line	141
  1070                           ;main.c: 141:                 }
  1071                           	
  1072                           l53:	
  1073  007A                     	line	142
  1074                           ;main.c: 142:             }
  1075                           	goto	l934
  1076  007A  2818               	line	143
  1077                           ;main.c: 143:             else if (DataState==DATA_LAMPS)
  1078                           	
  1079                           l52:	
  1080  007B                     	
  1081                           l978:	
  1082  007B                     		movlw	3
  1083  007B  3003               	xorwf	((_DataState)),w
  1084  007C  0623               	btfss	status,2
  1085  007D  1D03               	goto	u271
  1086  007E  2880               	goto	u270
  1087  007F  2881               u271:
  1088  0080                     	goto	l934
  1089  0080  2818               u270:
  1090  0081                     	line	147
  1091                           	
  1092                           l980:	
  1093  0081                     ;main.c: 144:             {;main.c: 147:                 if (Addressed==1)
  1094                           		decf	((_Addressed)),w
  1095  0081  0322               	btfss	status,2
  1096  0082  1D03               	goto	u281
  1097  0083  2885               	goto	u280
  1098  0084  2886               u281:
  1099  0085                     	goto	l56
  1100  0085  288A               u280:
  1101  0086                     	line	149
  1102                           	
  1103                           l982:	
  1104  0086                     ;main.c: 148:                 {;main.c: 149:                     Lamps = RxData;
  1105                           	movf	(_RxData),w
  1106  0086  082A               	movwf	(??_main+0)+0
  1107  0087  00B2               	movf	(??_main+0)+0,w
  1108  0088  0832               	movwf	(_Lamps)
  1109  0089  00A4               	line	152
  1110                           ;main.c: 152:                 }
  1111                           	
  1112                           l56:	
  1113  008A                     	line	154
  1114                           ;main.c: 154:                 if (BitCount>=BoxSize)
  1115                           	movf	(_BoxSize),w
  1116  008A  0825               	subwf	(_BitCount),w
  1117  008B  0228               	skipc
  1118  008C  1C03               	goto	u291
  1119  008D  288F               	goto	u290
  1120  008E  2890               u291:
  1121  008F                     	goto	l986
  1122  008F  2892               u290:
  1123  0090                     	line	155
  1124                           	
  1125                           l984:	
  1126  0090                     ;main.c: 155:                     BitCount = 0;
  1127                           	clrf	(_BitCount)
  1128  0090  01A8               	goto	l986
  1129  0091  2892               	
  1130                           l57:	
  1131  0092                     	line	156
  1132                           	
  1133                           l986:	
  1134  0092                     ;main.c: 156:                     DataState = DATA_ADDRESS;
  1135                           	clrf	(_DataState)
  1136  0092  01A3               	incf	(_DataState),f
  1137  0093  0AA3               	goto	l934
  1138  0094  2818               	line	158
  1139                           ;main.c: 158:             }
  1140                           	
  1141                           l55:	
  1142  0095                     	goto	l934
  1143  0095  2818               	
  1144                           l54:	
  1145  0096                     	goto	l934
  1146  0096  2818               	
  1147                           l51:	
  1148  0097                     	goto	l934
  1149  0097  2818               	
  1150                           l46:	
  1151  0098                     	goto	l934
  1152  0098  2818               	line	159
  1153                           ;main.c: 159:         }
  1154                           	
  1155                           l43:	
  1156  0099                     	goto	l934
  1157  0099  2818               	line	160
  1158                           ;main.c: 160:     }
  1159                           	
  1160                           l58:	
  1161  009A                     	goto	l934
  1162  009A  2818               	
  1163                           l59:	
  1164  009B                     	line	162
  1165                           	
  1166                           l60:	
  1167  009B                     	global	start
  1168                           	ljmp	start
  1169  009B  280B               	opt stack 0
  1170                           GLOBAL	__end_of_main
  1171                           	__end_of_main:
  1172  009C                     	signat	_main,89
  1173                           	global	_Initialise
  1174                           
  1175 ;; *************** function _Initialise *****************
  1176 ;; Defined at:
  1177 ;;		line 14 in file "system.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;		None
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;		None
  1182 ;; Return value:  Size  Location     Type
  1183 ;;                  1    wreg      void 
  1184 ;; Registers used:
  1185 ;;		wreg, status,2, status,0
  1186 ;; Tracked objects:
  1187 ;;		On entry : 0/0
  1188 ;;		On exit  : 0/0
  1189 ;;		Unchanged: 0/0
  1190 ;; Data sizes:     COMMON   BANK0
  1191 ;;      Params:         0       0
  1192 ;;      Locals:         0       0
  1193 ;;      Temps:          0       0
  1194 ;;      Totals:         0       0
  1195 ;;Total ram usage:        0 bytes
  1196 ;; Hardware stack levels used:    1
  1197 ;; Hardware stack levels required when called:    3
  1198 ;; This function calls:
  1199 ;;		Nothing
  1200 ;; This function is called by:
  1201 ;;		_main
  1202 ;; This function uses a non-reentrant model
  1203 ;;
  1204                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
  1205                           	file	"system.c"
  1206                           	line	14
  1207                           global __ptext1
  1208                           __ptext1:	;psect for function _Initialise
  1209  00C8                     psect	text1
  1210                           	file	"system.c"
  1211                           	line	14
  1212                           	global	__size_of_Initialise
  1213                           	__size_of_Initialise	equ	__end_of_Initialise-_Initialise
  1214  001C                     	
  1215                           _Initialise:	
  1216  00C8                     ;incstack = 0
  1217                           	opt	stack 4
  1218                           ; Regs used in _Initialise: [wreg+status,2+status,0]
  1219                           	line	17
  1220                           	
  1221                           l876:	
  1222  00C8                     ;system.c: 17:     CMCON = 0x07;
  1223                           	movlw	low(07h)
  1224  00C8  3007               	bcf	status, 5	;RP0=0, select bank0
  1225  00C9  1283               	movwf	(25)	;volatile
  1226  00CA  0099               	line	18
  1227                           ;system.c: 18:     TRISA = 0x3F;
  1228                           	movlw	low(03Fh)
  1229  00CB  303F               	bsf	status, 5	;RP0=1, select bank1
  1230  00CC  1683               	movwf	(133)^080h	;volatile
  1231  00CD  0085               	line	19
  1232                           	
  1233                           l878:	
  1234  00CE                     ;system.c: 19:     OPTION_REGbits.INTEDG = 1;
  1235                           	bsf	(129)^080h,6	;volatile
  1236  00CE  1701               	line	22
  1237                           	
  1238                           l880:	
  1239  00CF                     ;system.c: 22:     TRISC = 0;
  1240                           	clrf	(135)^080h	;volatile
  1241  00CF  0187               	line	25
  1242                           	
  1243                           l882:	
  1244  00D0                     ;system.c: 25:     T1CONbits.TMR1CS = 0;
  1245                           	bcf	status, 5	;RP0=0, select bank0
  1246  00D0  1283               	bcf	(16),1	;volatile
  1247  00D1  1090               	line	26
  1248                           	
  1249                           l884:	
  1250  00D2                     ;system.c: 26:     T1CONbits.T1CKPS = 0;
  1251                           	movlw	((0 & ((1<<2)-1))<<4)|not (((1<<2)-1)<<4)
  1252  00D2  30CF               	andwf	(16),f	;volatile
  1253  00D3  0590               	line	27
  1254                           	
  1255                           l886:	
  1256  00D4                     ;system.c: 27:     T1CONbits.nT1SYNC = 1;
  1257                           	bsf	(16),2	;volatile
  1258  00D4  1510               	line	28
  1259                           	
  1260                           l888:	
  1261  00D5                     ;system.c: 28:     T1CONbits.TMR1GE = 0;
  1262                           	bcf	(16),6	;volatile
  1263  00D5  1310               	line	29
  1264                           	
  1265                           l890:	
  1266  00D6                     ;system.c: 29:     TMR1H = 0x3C;
  1267                           	movlw	low(03Ch)
  1268  00D6  303C               	movwf	(15)	;volatile
  1269  00D7  008F               	line	30
  1270                           	
  1271                           l892:	
  1272  00D8                     ;system.c: 30:     TMR1L = 0xB0;
  1273                           	movlw	low(0B0h)
  1274  00D8  30B0               	movwf	(14)	;volatile
  1275  00D9  008E               	line	31
  1276                           	
  1277                           l894:	
  1278  00DA                     ;system.c: 31:     PIR1bits.TMR1IF = 0;
  1279                           	bcf	(12),0	;volatile
  1280  00DA  100C               	line	32
  1281                           	
  1282                           l896:	
  1283  00DB                     ;system.c: 32:     PIE1bits.TMR1IE = 1;
  1284                           	bsf	status, 5	;RP0=1, select bank1
  1285  00DB  1683               	bsf	(140)^080h,0	;volatile
  1286  00DC  140C               	line	33
  1287                           	
  1288                           l898:	
  1289  00DD                     ;system.c: 33:     T1CONbits.TMR1ON = 1;
  1290                           	bcf	status, 5	;RP0=0, select bank0
  1291  00DD  1283               	bsf	(16),0	;volatile
  1292  00DE  1410               	line	34
  1293                           	
  1294                           l900:	
  1295  00DF                     ;system.c: 34:     INTCONbits.PEIE = 1;
  1296                           	bsf	(11),6	;volatile
  1297  00DF  170B               	line	38
  1298                           	
  1299                           l902:	
  1300  00E0                     ;system.c: 38:     OPTION_REGbits.T0CS = 0;
  1301                           	bsf	status, 5	;RP0=1, select bank1
  1302  00E0  1683               	bcf	(129)^080h,5	;volatile
  1303  00E1  1281               	line	39
  1304                           	
  1305                           l904:	
  1306  00E2                     ;system.c: 39:     OPTION_REGbits.PSA = 1;
  1307                           	bsf	(129)^080h,3	;volatile
  1308  00E2  1581               	line	48
  1309                           	
  1310                           l83:	
  1311  00E3                     	return
  1312  00E3  0008               	opt stack 0
  1313                           GLOBAL	__end_of_Initialise
  1314                           	__end_of_Initialise:
  1315  00E4                     	signat	_Initialise,89
  1316                           	global	_ISR
  1317                           
  1318 ;; *************** function _ISR *****************
  1319 ;; Defined at:
  1320 ;;		line 16 in file "interrupts.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;		None
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;		None
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  1    wreg      void 
  1327 ;; Registers used:
  1328 ;;		wreg, status,2, status,0, pclath, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMMON   BANK0
  1334 ;;      Params:         0       0
  1335 ;;      Locals:         0       0
  1336 ;;      Temps:          0       3
  1337 ;;      Totals:         0       3
  1338 ;;Total ram usage:        3 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:    2
  1341 ;; This function calls:
  1342 ;;		_BitIntr
  1343 ;;		_EdgeIntr
  1344 ;;		_SendModule
  1345 ;;		_StartTickTimer
  1346 ;; This function is called by:
  1347 ;;		Interrupt level 1
  1348 ;; This function uses a non-reentrant model
  1349 ;;
  1350                           psect	text2,local,class=CODE,delta=2,merge=1,group=0
  1351                           	file	"interrupts.c"
  1352                           	line	16
  1353                           global __ptext2
  1354                           __ptext2:	;psect for function _ISR
  1355  009C                     psect	text2
  1356                           	file	"interrupts.c"
  1357                           	line	16
  1358                           	global	__size_of_ISR
  1359                           	__size_of_ISR	equ	__end_of_ISR-_ISR
  1360  002C                     	
  1361                           _ISR:	
  1362  009C                     ;incstack = 0
  1363                           	opt	stack 4
  1364                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  1365                           psect	intentry,class=CODE,delta=2
  1366                           global __pintentry
  1367                           __pintentry:
  1368  0004                     global interrupt_function
  1369                           interrupt_function:
  1370  0004                     	global saved_w
  1371                           	saved_w	set	btemp+0
  1372  005E                     	movwf	saved_w
  1373  0004  00DE               	swapf	status,w
  1374  0005  0E03               	bcf	status, 5	;RP0=0, select bank0
  1375  0006  1283               	movwf	(??_ISR+1)
  1376  0007  00B0               	movf	pclath,w
  1377  0008  080A               	movwf	(??_ISR+2)
  1378  0009  00B1               	ljmp	_ISR
  1379  000A  289C               psect	text2
  1380                           	line	20
  1381                           	
  1382                           i1l1018:	
  1383  009C                     ;interrupts.c: 20:     if (PIR1bits.TMR1IF==1)
  1384                           	btfss	(12),0	;volatile
  1385  009C  1C0C               	goto	u35_21
  1386  009D  289F               	goto	u35_20
  1387  009E  28A0               u35_21:
  1388  009F                     	goto	i1l1030
  1389  009F  28B2               u35_20:
  1390  00A0                     	line	22
  1391                           	
  1392                           i1l1020:	
  1393  00A0                     ;interrupts.c: 21:     {;interrupts.c: 22:         StartTickTimer();
  1394                           	fcall	_StartTickTimer
  1395  00A0  20FF               	line	25
  1396                           	
  1397                           i1l1022:	
  1398  00A1                     ;interrupts.c: 25:         if (TickCount==9)
  1399                           		movlw	9
  1400  00A1  3009               	bcf	status, 5	;RP0=0, select bank0
  1401  00A2  1283               	xorwf	((_TickCount)),w
  1402  00A3  0620               	btfss	status,2
  1403  00A4  1D03               	goto	u36_21
  1404  00A5  28A7               	goto	u36_20
  1405  00A6  28A8               u36_21:
  1406  00A7                     	goto	i1l1028
  1407  00A7  28AB               u36_20:
  1408  00A8                     	line	27
  1409                           	
  1410                           i1l1024:	
  1411  00A8                     ;interrupts.c: 26:         {;interrupts.c: 27:             TickCount = 0;
  1412                           	clrf	(_TickCount)
  1413  00A8  01A0               	line	28
  1414                           	
  1415                           i1l1026:	
  1416  00A9                     ;interrupts.c: 28:             SendModule();
  1417                           	fcall	_SendModule
  1418  00A9  2136               	line	29
  1419                           ;interrupts.c: 29:         }
  1420                           	goto	i1l1030
  1421  00AA  28B2               	line	30
  1422                           ;interrupts.c: 30:         else
  1423                           	
  1424                           i1l141:	
  1425  00AB                     	line	32
  1426                           	
  1427                           i1l1028:	
  1428  00AB                     ;interrupts.c: 31:         {;interrupts.c: 32:             TickCount++;
  1429                           	movlw	low(01h)
  1430  00AB  3001               	bcf	status, 5	;RP0=0, select bank0
  1431  00AC  1283               	movwf	(??_ISR+0)+0
  1432  00AD  00AF               	movf	(??_ISR+0)+0,w
  1433  00AE  082F               	addwf	(_TickCount),f
  1434  00AF  07A0               	goto	i1l1030
  1435  00B0  28B2               	line	33
  1436                           ;interrupts.c: 33:         }
  1437                           	
  1438                           i1l142:	
  1439  00B1                     	goto	i1l1030
  1440  00B1  28B2               	line	34
  1441                           ;interrupts.c: 34:     }
  1442                           	
  1443                           i1l140:	
  1444  00B2                     	line	38
  1445                           	
  1446                           i1l1030:	
  1447  00B2                     ;interrupts.c: 38:     if (INTCONbits.INTF)
  1448                           	btfss	(11),1	;volatile
  1449  00B2  1C8B               	goto	u37_21
  1450  00B3  28B5               	goto	u37_20
  1451  00B4  28B6               u37_21:
  1452  00B5                     	goto	i1l1036
  1453  00B5  28B9               u37_20:
  1454  00B6                     	line	40
  1455                           	
  1456                           i1l1032:	
  1457  00B6                     ;interrupts.c: 39:     {;interrupts.c: 40:         INTCONbits.INTF = 0;
  1458                           	bcf	(11),1	;volatile
  1459  00B6  108B               	line	42
  1460                           	
  1461                           i1l1034:	
  1462  00B7                     ;interrupts.c: 42:         EdgeIntr();
  1463                           	fcall	_EdgeIntr
  1464  00B7  212F               	goto	i1l1036
  1465  00B8  28B9               	line	59
  1466                           ;interrupts.c: 59:     }
  1467                           	
  1468                           i1l143:	
  1469  00B9                     	line	62
  1470                           	
  1471                           i1l1036:	
  1472  00B9                     ;interrupts.c: 62:     if (INTCONbits.T0IF==1)
  1473                           	btfss	(11),2	;volatile
  1474  00B9  1D0B               	goto	u38_21
  1475  00BA  28BC               	goto	u38_20
  1476  00BB  28BD               u38_21:
  1477  00BC                     	goto	i1l145
  1478  00BC  28C0               u38_20:
  1479  00BD                     	line	64
  1480                           	
  1481                           i1l1038:	
  1482  00BD                     ;interrupts.c: 63:     {;interrupts.c: 64:         INTCONbits.T0IF= 0;
  1483                           	bcf	(11),2	;volatile
  1484  00BD  110B               	line	65
  1485                           	
  1486                           i1l1040:	
  1487  00BE                     ;interrupts.c: 65:         BitIntr();
  1488                           	fcall	_BitIntr
  1489  00BE  2115               	goto	i1l145
  1490  00BF  28C0               	line	66
  1491                           ;interrupts.c: 66:     }
  1492                           	
  1493                           i1l144:	
  1494  00C0                     	line	68
  1495                           	
  1496                           i1l145:	
  1497  00C0                     	bcf	status, 5	;RP0=0, select bank0
  1498  00C0  1283               	movf	(??_ISR+2),w
  1499  00C1  0831               	movwf	pclath
  1500  00C2  008A               	swapf	(??_ISR+1)^00h,w
  1501  00C3  0E30               	movwf	status
  1502  00C4  0083               	swapf	saved_w,f
  1503  00C5  0EDE               	swapf	saved_w,w
  1504  00C6  0E5E               	retfie
  1505  00C7  0009               	opt stack 0
  1506                           GLOBAL	__end_of_ISR
  1507                           	__end_of_ISR:
  1508  00C8                     	signat	_ISR,89
  1509                           	global	_StartTickTimer
  1510                           
  1511 ;; *************** function _StartTickTimer *****************
  1512 ;; Defined at:
  1513 ;;		line 24 in file "user.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;		None
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;		None
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  1    wreg      void 
  1520 ;; Registers used:
  1521 ;;		wreg, status,2, status,0, pclath, cstack
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMMON   BANK0
  1527 ;;      Params:         0       0
  1528 ;;      Locals:         0       0
  1529 ;;      Temps:          0       1
  1530 ;;      Totals:         0       1
  1531 ;;Total ram usage:        1 bytes
  1532 ;; Hardware stack levels used:    1
  1533 ;; Hardware stack levels required when called:    1
  1534 ;; This function calls:
  1535 ;;		_BitDataInit
  1536 ;; This function is called by:
  1537 ;;		_ISR
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           psect	text3,local,class=CODE,delta=2,merge=1,group=0
  1541                           	file	"user.c"
  1542                           	line	24
  1543                           global __ptext3
  1544                           __ptext3:	;psect for function _StartTickTimer
  1545  00FF                     psect	text3
  1546                           	file	"user.c"
  1547                           	line	24
  1548                           	global	__size_of_StartTickTimer
  1549                           	__size_of_StartTickTimer	equ	__end_of_StartTickTimer-_StartTickTimer
  1550  0016                     	
  1551                           _StartTickTimer:	
  1552  00FF                     ;incstack = 0
  1553                           	opt	stack 4
  1554                           ; Regs used in _StartTickTimer: [wreg+status,2+status,0+pclath+cstack]
  1555                           	line	27
  1556                           	
  1557                           i1l906:	
  1558  00FF                     ;user.c: 27:     T1CONbits.TMR1ON = 0;
  1559                           	bcf	status, 5	;RP0=0, select bank0
  1560  00FF  1283               	bcf	(16),0	;volatile
  1561  0100  1010               	line	29
  1562                           ;user.c: 29:     PIR1bits.TMR1IF = 0;
  1563                           	bcf	(12),0	;volatile
  1564  0101  100C               	line	31
  1565                           	
  1566                           i1l908:	
  1567  0102                     ;user.c: 31:     TMR1H = 0x3C;
  1568                           	movlw	low(03Ch)
  1569  0102  303C               	movwf	(15)	;volatile
  1570  0103  008F               	line	32
  1571                           ;user.c: 32:     TMR1L = 0xB0;
  1572                           	movlw	low(0B0h)
  1573  0104  30B0               	movwf	(14)	;volatile
  1574  0105  008E               	line	34
  1575                           	
  1576                           i1l910:	
  1577  0106                     ;user.c: 34:     T1CONbits.TMR1ON = 1;
  1578                           	bsf	(16),0	;volatile
  1579  0106  1410               	line	38
  1580                           	
  1581                           i1l912:	
  1582  0107                     ;user.c: 38:     if (++EdgeDetect >= 2)
  1583                           	movlw	low(01h)
  1584  0107  3001               	movwf	(??_StartTickTimer+0)+0
  1585  0108  00AE               	movf	(??_StartTickTimer+0)+0,w
  1586  0109  082E               	addwf	(_EdgeDetect),f
  1587  010A  07A1               	movlw	low(02h)
  1588  010B  3002               	subwf	((_EdgeDetect)),w
  1589  010C  0221               	skipc
  1590  010D  1C03               	goto	u17_21
  1591  010E  2910               	goto	u17_20
  1592  010F  2911               u17_21:
  1593  0110                     	goto	i1l111
  1594  0110  2914               u17_20:
  1595  0111                     	line	39
  1596                           	
  1597                           i1l914:	
  1598  0111                     ;user.c: 39:         BitDataInit( 0);
  1599                           	movlw	low(0)
  1600  0111  3000               	fcall	_BitDataInit
  1601  0112  20E4               	goto	i1l111
  1602  0113  2914               	
  1603                           i1l110:	
  1604  0114                     	line	40
  1605                           	
  1606                           i1l111:	
  1607  0114                     	return
  1608  0114  0008               	opt stack 0
  1609                           GLOBAL	__end_of_StartTickTimer
  1610                           	__end_of_StartTickTimer:
  1611  0115                     	signat	_StartTickTimer,89
  1612                           	global	_BitDataInit
  1613                           
  1614 ;; *************** function _BitDataInit *****************
  1615 ;; Defined at:
  1616 ;;		line 29 in file "main.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;  ModeTx          1    wreg     unsigned char 
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;  ModeTx          1    0[BANK0 ] unsigned char 
  1621 ;;  IntEnable       1    1[BANK0 ] unsigned char 
  1622 ;; Return value:  Size  Location     Type
  1623 ;;                  1    wreg      void 
  1624 ;; Registers used:
  1625 ;;		wreg, status,2, status,0
  1626 ;; Tracked objects:
  1627 ;;		On entry : 0/0
  1628 ;;		On exit  : 0/0
  1629 ;;		Unchanged: 0/0
  1630 ;; Data sizes:     COMMON   BANK0
  1631 ;;      Params:         0       0
  1632 ;;      Locals:         0       0
  1633 ;;      Temps:          0       0
  1634 ;;      Totals:         0       0
  1635 ;;Total ram usage:        0 bytes
  1636 ;; Hardware stack levels used:    1
  1637 ;; Hardware stack levels required when called:    3
  1638 ;; This function calls:
  1639 ;;		Nothing
  1640 ;; This function is called by:
  1641 ;;		_main
  1642 ;;		_StartTickTimer
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           psect	text4,local,class=CODE,delta=2,merge=1,group=0
  1646                           	file	"main.c"
  1647                           	line	29
  1648                           global __ptext4
  1649                           __ptext4:	;psect for function _BitDataInit
  1650  00E4                     psect	text4
  1651                           	file	"main.c"
  1652                           	line	29
  1653                           	global	__size_of_BitDataInit
  1654                           	__size_of_BitDataInit	equ	__end_of_BitDataInit-_BitDataInit
  1655  001B                     	
  1656                           _BitDataInit:	
  1657  00E4                     ;incstack = 0
  1658                           	opt	stack 1
  1659                           ; Regs used in _BitDataInit: [wreg+status,2+status,0]
  1660                           ;BitDataInit@ModeTx stored from wreg
  1661                           	bcf	status, 5	;RP0=0, select bank0
  1662  00E4  1283               	movwf	(BitDataInit@ModeTx)
  1663  00E5  00AC               	line	32
  1664                           	
  1665                           i1l862:	
  1666  00E6                     ;main.c: 29: };main.c: 30: ;main.c: 32: 
  1667                           	movlw	0
  1668  00E6  3000               	btfsc	(11),7	;volatile
  1669  00E7  1B8B               	movlw	1
  1670  00E8  3001               	movwf	(BitDataInit@IntEnable)
  1671  00E9  00AD               	line	33
  1672                           	
  1673                           i1l864:	
  1674  00EA                     ;main.c: 33: void main(void) {
  1675                           	bcf	(11),7	;volatile
  1676  00EA  138B               	line	35
  1677                           	
  1678                           i1l866:	
  1679  00EB                     ;main.c: 35:     Initialise();
  1680                           		decf	((BitDataInit@ModeTx)),w
  1681  00EB  032C               	btfss	status,2
  1682  00EC  1D03               	goto	u16_21
  1683  00ED  28EF               	goto	u16_20
  1684  00EE  28F0               u16_21:
  1685  00EF                     	goto	i1l35
  1686  00EF  28F3               u16_20:
  1687  00F0                     	line	38
  1688                           	
  1689                           i1l868:	
  1690  00F0                     ;main.c: 36: ;main.c: 38:     BitDataInit( 0);
  1691                           	bcf	(11),4	;volatile
  1692  00F0  120B               	line	41
  1693                           ;main.c: 41:     INTCONbits.GIE = 1;
  1694                           	bsf	(57/8),(57)&7	;volatile
  1695  00F1  1487               	line	42
  1696                           ;main.c: 42: 
  1697                           	goto	i1l874
  1698  00F2  28F9               	line	43
  1699                           ;main.c: 43:     while(1)
  1700                           	
  1701                           i1l35:	
  1702  00F3                     	line	46
  1703                           ;main.c: 44:     {;main.c: 46:         {
  1704                           	bcf	(57/8),(57)&7	;volatile
  1705  00F3  1087               	line	49
  1706                           	
  1707                           i1l870:	
  1708  00F4                     ;main.c: 49: 
  1709                           	clrf	(_DataState)
  1710  00F4  01A3               	line	50
  1711                           ;main.c: 50: 
  1712                           	clrf	(_Addressed)
  1713  00F5  01A2               	line	51
  1714                           ;main.c: 51:             INTCONbits.T0IE = 0;
  1715                           	clrf	(_BitCount)
  1716  00F6  01A8               	line	54
  1717                           	
  1718                           i1l872:	
  1719  00F7                     ;main.c: 54:             INTCONbits.T0IE = 0;
  1720                           	bsf	(11),4	;volatile
  1721  00F7  160B               	goto	i1l874
  1722  00F8  28F9               	line	55
  1723                           ;main.c: 55: 
  1724                           	
  1725                           i1l36:	
  1726  00F9                     	line	58
  1727                           	
  1728                           i1l874:	
  1729  00F9                     ;main.c: 58: 
  1730                           	rrf	(BitDataInit@IntEnable),w
  1731  00F9  0C2D               	skipc
  1732  00FA  1C03               	bcf	(11),7	;volatile
  1733  00FB  138B               	skipnc
  1734  00FC  1803               	bsf	(11),7	;volatile
  1735  00FD  178B               	line	59
  1736                           	
  1737                           i1l37:	
  1738  00FE                     	return
  1739  00FE  0008               	opt stack 0
  1740                           GLOBAL	__end_of_BitDataInit
  1741                           	__end_of_BitDataInit:
  1742  00FF                     	signat	_BitDataInit,4217
  1743                           	global	_SendModule
  1744                           
  1745 ;; *************** function _SendModule *****************
  1746 ;; Defined at:
  1747 ;;		line 79 in file "user.c"
  1748 ;; Parameters:    Size  Location     Type
  1749 ;;		None
  1750 ;; Auto vars:     Size  Location     Type
  1751 ;;		None
  1752 ;; Return value:  Size  Location     Type
  1753 ;;                  1    wreg      void 
  1754 ;; Registers used:
  1755 ;;		None
  1756 ;; Tracked objects:
  1757 ;;		On entry : 0/0
  1758 ;;		On exit  : 0/0
  1759 ;;		Unchanged: 0/0
  1760 ;; Data sizes:     COMMON   BANK0
  1761 ;;      Params:         0       0
  1762 ;;      Locals:         0       0
  1763 ;;      Temps:          0       0
  1764 ;;      Totals:         0       0
  1765 ;;Total ram usage:        0 bytes
  1766 ;; Hardware stack levels used:    1
  1767 ;; This function calls:
  1768 ;;		Nothing
  1769 ;; This function is called by:
  1770 ;;		_ISR
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773                           psect	text5,local,class=CODE,delta=2,merge=1,group=0
  1774                           	file	"user.c"
  1775                           	line	79
  1776                           global __ptext5
  1777                           __ptext5:	;psect for function _SendModule
  1778  0136                     psect	text5
  1779                           	file	"user.c"
  1780                           	line	79
  1781                           	global	__size_of_SendModule
  1782                           	__size_of_SendModule	equ	__end_of_SendModule-_SendModule
  1783  0001                     	
  1784                           _SendModule:	
  1785  0136                     ;incstack = 0
  1786                           	opt	stack 5
  1787                           ; Regs used in _SendModule: []
  1788                           	line	82
  1789                           	
  1790                           i1l121:	
  1791  0136                     	return
  1792  0136  0008               	opt stack 0
  1793                           GLOBAL	__end_of_SendModule
  1794                           	__end_of_SendModule:
  1795  0137                     	signat	_SendModule,89
  1796                           	global	_EdgeIntr
  1797                           
  1798 ;; *************** function _EdgeIntr *****************
  1799 ;; Defined at:
  1800 ;;		line 44 in file "user.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;		None
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;		None
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg, status,2
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMMON   BANK0
  1814 ;;      Params:         0       0
  1815 ;;      Locals:         0       0
  1816 ;;      Temps:          0       0
  1817 ;;      Totals:         0       0
  1818 ;;Total ram usage:        0 bytes
  1819 ;; Hardware stack levels used:    1
  1820 ;; This function calls:
  1821 ;;		Nothing
  1822 ;; This function is called by:
  1823 ;;		_ISR
  1824 ;; This function uses a non-reentrant model
  1825 ;;
  1826                           psect	text6,local,class=CODE,delta=2,merge=1,group=0
  1827                           	line	44
  1828                           global __ptext6
  1829                           __ptext6:	;psect for function _EdgeIntr
  1830  012F                     psect	text6
  1831                           	file	"user.c"
  1832                           	line	44
  1833                           	global	__size_of_EdgeIntr
  1834                           	__size_of_EdgeIntr	equ	__end_of_EdgeIntr-_EdgeIntr
  1835  0007                     	
  1836                           _EdgeIntr:	
  1837  012F                     ;incstack = 0
  1838                           	opt	stack 5
  1839                           ; Regs used in _EdgeIntr: [wreg+status,2]
  1840                           	line	50
  1841                           	
  1842                           i1l916:	
  1843  012F                     ;user.c: 50:     EdgeDetect = 0;
  1844                           	bcf	status, 5	;RP0=0, select bank0
  1845  012F  1283               	clrf	(_EdgeDetect)
  1846  0130  01A1               	line	53
  1847                           	
  1848                           i1l918:	
  1849  0131                     ;user.c: 53:     TMR0 = 175;
  1850                           	movlw	low(0AFh)
  1851  0131  30AF               	movwf	(1)	;volatile
  1852  0132  0081               	line	55
  1853                           	
  1854                           i1l920:	
  1855  0133                     ;user.c: 55:     INTCONbits.T0IF = 0;
  1856                           	bcf	(11),2	;volatile
  1857  0133  110B               	line	56
  1858                           	
  1859                           i1l922:	
  1860  0134                     ;user.c: 56:     INTCONbits.T0IE = 1;
  1861                           	bsf	(11),5	;volatile
  1862  0134  168B               	line	57
  1863                           	
  1864                           i1l114:	
  1865  0135                     	return
  1866  0135  0008               	opt stack 0
  1867                           GLOBAL	__end_of_EdgeIntr
  1868                           	__end_of_EdgeIntr:
  1869  0136                     	signat	_EdgeIntr,89
  1870                           	global	_BitIntr
  1871                           
  1872 ;; *************** function _BitIntr *****************
  1873 ;; Defined at:
  1874 ;;		line 62 in file "user.c"
  1875 ;; Parameters:    Size  Location     Type
  1876 ;;		None
  1877 ;; Auto vars:     Size  Location     Type
  1878 ;;		None
  1879 ;; Return value:  Size  Location     Type
  1880 ;;                  1    wreg      void 
  1881 ;; Registers used:
  1882 ;;		wreg
  1883 ;; Tracked objects:
  1884 ;;		On entry : 0/0
  1885 ;;		On exit  : 0/0
  1886 ;;		Unchanged: 0/0
  1887 ;; Data sizes:     COMMON   BANK0
  1888 ;;      Params:         0       0
  1889 ;;      Locals:         0       0
  1890 ;;      Temps:          0       0
  1891 ;;      Totals:         0       0
  1892 ;;Total ram usage:        0 bytes
  1893 ;; Hardware stack levels used:    1
  1894 ;; This function calls:
  1895 ;;		Nothing
  1896 ;; This function is called by:
  1897 ;;		_ISR
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           psect	text7,local,class=CODE,delta=2,merge=1,group=0
  1901                           	line	62
  1902                           global __ptext7
  1903                           __ptext7:	;psect for function _BitIntr
  1904  0115                     psect	text7
  1905                           	file	"user.c"
  1906                           	line	62
  1907                           	global	__size_of_BitIntr
  1908                           	__size_of_BitIntr	equ	__end_of_BitIntr-_BitIntr
  1909  000B                     	
  1910                           _BitIntr:	
  1911  0115                     ;incstack = 0
  1912                           	opt	stack 5
  1913                           ; Regs used in _BitIntr: [wreg]
  1914                           	line	69
  1915                           	
  1916                           i1l1012:	
  1917  0115                     ;user.c: 69:     IntrData <<= 1;
  1918                           	clrc
  1919  0115  1003               	bcf	status, 5	;RP0=0, select bank0
  1920  0116  1283               	rlf	(_IntrData),f
  1921  0117  0DA9               
  1922                           	line	70
  1923                           	
  1924                           i1l1014:	
  1925  0118                     ;user.c: 70:     if (RA2==1)
  1926                           	btfss	(42/8),(42)&7	;volatile
  1927  0118  1D05               	goto	u34_21
  1928  0119  291B               	goto	u34_20
  1929  011A  291C               u34_21:
  1930  011B                     	goto	i1l117
  1931  011B  291D               u34_20:
  1932  011C                     	line	71
  1933                           	
  1934                           i1l1016:	
  1935  011C                     ;user.c: 71:         IntrData |= 1;
  1936                           	bsf	(_IntrData)+(0/8),(0)&7
  1937  011C  1429               	
  1938                           i1l117:	
  1939  011D                     	line	74
  1940                           ;user.c: 74:     IntrNewBit = 1;
  1941                           	clrf	(_IntrNewBit)
  1942  011D  01AB               	incf	(_IntrNewBit),f
  1943  011E  0AAB               	line	75
  1944                           	
  1945                           i1l118:	
  1946  011F                     	return
  1947  011F  0008               	opt stack 0
  1948                           GLOBAL	__end_of_BitIntr
  1949                           	__end_of_BitIntr:
  1950  0120                     	signat	_BitIntr,89
  1951                           global	___latbits
  1952                           ___latbits	equ	0
  1953  0000                     	global	btemp
  1954                           	btemp set 05Eh
  1955  005E                     
  1956                           	DABS	1,94,2	;btemp
  1957                           	global	wtemp0
  1958                           	wtemp0 set btemp+0
  1959  005E                     	end


Data Sizes:
    Strings     0
    Constant    1
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      7      19

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_StartTickTimer

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      45
                                              6 BANK0      1     1      0
                        _BitDataInit
                         _Initialise
 ---------------------------------------------------------------------------------
 (1) _Initialise                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _BitDataInit                                          2     2      0      45
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0      45
                                              3 BANK0      3     3      0
                            _BitIntr
                           _EdgeIntr
                         _SendModule
                     _StartTickTimer
 ---------------------------------------------------------------------------------
 (3) _StartTickTimer                                       1     1      0      45
                                              2 BANK0      1     1      0
                        _BitDataInit
 ---------------------------------------------------------------------------------
 (4) _BitDataInit                                          2     2      0      45
 ---------------------------------------------------------------------------------
 (3) _SendModule                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EdgeIntr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BitIntr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BitDataInit
   _Initialise

 _ISR (ROOT)
   _BitIntr
   _EdgeIntr
   _SendModule
   _StartTickTimer
     _BitDataInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      7      13       4       30.6%
ABS                  0      0      13       5        0.0%
DATA                 0      0      13       6        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Oct 29 17:06:38 2018

                      pc 0002              __CFG_CP$OFF 0000                       l50 005D  
                     l42 0018                       l43 0099                       l51 0097  
                     l60 009B                       l52 007B                       l44 003F  
                     l53 007A                       l45 003E                       l46 0098  
                     l54 0096                       l55 0095                       l47 0063  
                     l56 008A                       l48 0062                       l57 0092  
                     l49 005B                       l58 009A                       l83 00E3  
                     l59 009B                       fsr 0004                      l900 00DF  
                    l902 00E0                      l904 00E2                      l930 0013  
                    l940 0023                      l932 0016                      l950 0037  
                    l942 0024                      l934 0018                      l880 00CF  
                    l960 004A                      l952 0039                      l944 0025  
                    l936 001E                      l890 00D6                      l882 00D0  
                    l962 004B                      l970 0063                      l954 003B  
                    l946 0029                      l938 001F                      l892 00D8  
                    l884 00D2                      l876 00C8                      l980 0081  
                    l972 0069                      l964 0056                      l948 002E  
                    l956 003F                      l894 00DA                      l886 00D4  
                    l878 00CE                      l982 0086                      l974 006F  
                    l966 005B                      l958 0044                      l896 00DB  
                    l888 00D5                      l984 0090                      l976 0070  
                    l968 005D                      l898 00DD                      l986 0092  
                    l978 007B                      _RA2 002A                      _RC1 0039  
                    _RC3 003B                      _RC5 003D                      u200 002E  
                    u201 002D                      u210 0037                      u211 0036  
                    u220 0044                      u221 0043                      u230 004A  
                    u231 0049                      u240 0056                      u241 0055  
                    u250 0069                      u251 0068                      u260 006F  
                    u261 006E                      u270 0081                      u190 001E  
                    u271 0080                      u191 001D                      u280 0086  
                    u281 0085                      u290 0090             __CFG_CPD$OFF 0000  
                    u291 008F                      _ISR 009C                      fsr0 0004  
                    indf 0000             __CFG_FOSC$EC 0000               _EdgeDetect 0021  
                   ?_ISR 002C                     i1l35 00F3                     i1l36 00F9  
                   i1l37 00FE                     _TMR0 0001                     _Sync 0027  
                   _main 0013                     btemp 005E                     start 000B  
        __end_of_BitIntr 0120              _BitDataInit 00E4                    ??_ISR 002F  
                  ?_main 002C            __CFG_WDTE$OFF 0000                    _CMCON 0019  
                  i1l110 0114                    i1l111 0114                    i1l121 0136  
                  i1l114 0135                    i1l140 00B2                    i1l117 011D  
                  i1l141 00AB                    i1l118 011F                    i1l142 00B1  
                  i1l143 00B9                    i1l144 00C0                    i1l145 00C0  
                  i1l910 0106                    i1l920 0133                    i1l912 0107  
                  i1l922 0134                    i1l914 0111                    i1l906 00FF  
                  i1l916 012F                    i1l908 0102                    i1l918 0131  
                  i1l870 00F4                    i1l862 00E6                    i1l872 00F7  
                  i1l864 00EA                    i1l874 00F9                    i1l866 00EB  
                  i1l868 00F0                    u16_20 00F0                    u16_21 00EF  
                  u17_20 0111                    u17_21 0110                    _TMR1H 000F  
                  _TMR1L 000E                    u34_20 011C                    u34_21 011B  
                  u35_20 00A0                    u35_21 009F                    u36_20 00A8  
                  u36_21 00A7                    u37_20 00B6                    u37_21 00B5  
                  u38_20 00BD                    u38_21 00BC                    _TRISA 0085  
                  _TRISC 0087                    _Lamps 0024           __CFG_BOREN$OFF 0000  
                  pclath 000A                    status 0003         __end_of_EdgeIntr 0136  
                  wtemp0 005E           __CFG_MCLRE$OFF 0000          __initialization 000C  
           __end_of_main 009C               _Initialise 00C8               _IntrNewBit 002B  
                 ??_main 0032               _SendModule 0136                   i1l1012 0115  
                 i1l1020 00A0                   i1l1014 0118                   i1l1022 00A1  
                 i1l1030 00B2                   i1l1016 011C                   i1l1040 00BE  
                 i1l1032 00B6                   i1l1024 00A8                   i1l1034 00B7  
                 i1l1026 00A9                   i1l1018 009C                   i1l1036 00B9  
                 i1l1028 00AB                   i1l1038 00BD                ??_BitIntr 0000  
       ??_StartTickTimer 002E           __CFG_PWRTE$OFF 0000                   _RxData 002A  
                 saved_w 005E  __end_of__initialization 0011           __pcstackCOMMON 0000  
            ?_Initialise 002C                ?_EdgeIntr 002C           _OPTION_REGbits 0081  
      BitDataInit@ModeTx 002C              ?_SendModule 002C               __pbssBANK0 0020  
             __pmaintext 0013             ?_BitDataInit 002C               __pintentry 0004  
             ??_EdgeIntr 0000               __stringtab 0128                  _Address 0026  
                _BitIntr 0115      __size_of_Initialise 001C                  _BoxSize 0025  
    __size_of_SendModule 0001                  __ptext1 00C8                  __ptext2 009C  
                __ptext3 00FF                  __ptext4 00E4                  __ptext5 0136  
                __ptext6 012F                  __ptext7 0115     BitDataInit@IntEnable 002D  
           __size_of_ISR 002C                _T1CONbits 0010                  clrloop0 0121  
   end_of_initialization 0011                _Addressed 0022                _DataState 0023  
           ??_Initialise 0000     __size_of_BitDataInit 001B      start_initialization 000C  
            __end_of_ISR 00C8        __size_of_EdgeIntr 0007             ??_SendModule 0000  
     __end_of_Initialise 00E4                _TickCount 0020      __end_of_BOX_ADDRESS 012F  
__size_of_StartTickTimer 0016       __end_of_SendModule 0137                ___latbits 0000  
          __pcstackBANK0 002C                 ?_BitIntr 002C                __pstrings 0128  
      interrupt_function 0004              _BOX_ADDRESS 012E                clear_ram0 0120  
               _PIE1bits 008C                 _PIR1bits 000C              __stringbase 012D  
               _EdgeIntr 012F                 _BitCount 0028         __size_of_BitIntr 000B  
               _IntrData 0029           _StartTickTimer 00FF       __end_of__stringtab 012E  
          __size_of_main 0089   __end_of_StartTickTimer 0115            ??_BitDataInit 0000  
             _INTCONbits 000B                 intlevel1 0000                stringcode 0128  
        ?_StartTickTimer 002C      __end_of_BitDataInit 00FF                 stringdir 0128  
               stringtab 0128  
