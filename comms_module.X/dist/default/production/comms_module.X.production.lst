

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Oct 29 15:22:22 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F630 Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   100                           PORTC equ 07h ;# 
   101  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   102                           PCLATH equ 0Ah ;# 
   103  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   104                           INTCON equ 0Bh ;# 
   105  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   106                           PIR1 equ 0Ch ;# 
   107  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   108                           TMR1 equ 0Eh ;# 
   109  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   110                           TMR1L equ 0Eh ;# 
   111  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   112                           TMR1H equ 0Fh ;# 
   113  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   114                           T1CON equ 010h ;# 
   115  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   116                           CMCON equ 019h ;# 
   117  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   118                           OPTION_REG equ 081h ;# 
   119  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   120                           TRISA equ 085h ;# 
   121  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   122                           TRISC equ 087h ;# 
   123  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   124                           PIE1 equ 08Ch ;# 
   125  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   126                           PCON equ 08Eh ;# 
   127  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   128                           OSCCAL equ 090h ;# 
   129  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   130                           WPUA equ 095h ;# 
   131  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   132                           WPU equ 095h ;# 
   133  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   134                           IOCA equ 096h ;# 
   135  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   136                           IOC equ 096h ;# 
   137  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   138                           VRCON equ 099h ;# 
   139  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   140                           EEDAT equ 09Ah ;# 
   141  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   142                           EEDATA equ 09Ah ;# 
   143  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   144                           EEADR equ 09Bh ;# 
   145  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   146                           EECON1 equ 09Ch ;# 
   147  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   148                           EECON2 equ 09Dh ;# 
   149  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   150                           INDF equ 00h ;# 
   151  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   152                           TMR0 equ 01h ;# 
   153  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   154                           PCL equ 02h ;# 
   155  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   156                           STATUS equ 03h ;# 
   157  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   158                           FSR equ 04h ;# 
   159  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   160                           PORTA equ 05h ;# 
   161  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   162                           PORTC equ 07h ;# 
   163  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   164                           PCLATH equ 0Ah ;# 
   165  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   166                           INTCON equ 0Bh ;# 
   167  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   168                           PIR1 equ 0Ch ;# 
   169  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   170                           TMR1 equ 0Eh ;# 
   171  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   172                           TMR1L equ 0Eh ;# 
   173  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   174                           TMR1H equ 0Fh ;# 
   175  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   176                           T1CON equ 010h ;# 
   177  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   178                           CMCON equ 019h ;# 
   179  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   180                           OPTION_REG equ 081h ;# 
   181  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   182                           TRISA equ 085h ;# 
   183  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   184                           TRISC equ 087h ;# 
   185  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   186                           PIE1 equ 08Ch ;# 
   187  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   188                           PCON equ 08Eh ;# 
   189  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   190                           OSCCAL equ 090h ;# 
   191  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   192                           WPUA equ 095h ;# 
   193  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   194                           WPU equ 095h ;# 
   195  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   196                           IOCA equ 096h ;# 
   197  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   198                           IOC equ 096h ;# 
   199  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   200                           VRCON equ 099h ;# 
   201  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   202                           EEDAT equ 09Ah ;# 
   203  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   204                           EEDATA equ 09Ah ;# 
   205  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   206                           EEADR equ 09Bh ;# 
   207  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   208                           EECON1 equ 09Ch ;# 
   209  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   210                           EECON2 equ 09Dh ;# 
   211  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   212                           INDF equ 00h ;# 
   213  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   214                           TMR0 equ 01h ;# 
   215  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   216                           PCL equ 02h ;# 
   217  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   218                           STATUS equ 03h ;# 
   219  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   220                           FSR equ 04h ;# 
   221  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   222                           PORTA equ 05h ;# 
   223  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   224                           PORTC equ 07h ;# 
   225  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   226                           PCLATH equ 0Ah ;# 
   227  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   228                           INTCON equ 0Bh ;# 
   229  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   230                           PIR1 equ 0Ch ;# 
   231  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   232                           TMR1 equ 0Eh ;# 
   233  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   234                           TMR1L equ 0Eh ;# 
   235  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   236                           TMR1H equ 0Fh ;# 
   237  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   238                           T1CON equ 010h ;# 
   239  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   240                           CMCON equ 019h ;# 
   241  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   242                           OPTION_REG equ 081h ;# 
   243  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   244                           TRISA equ 085h ;# 
   245  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   246                           TRISC equ 087h ;# 
   247  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   248                           PIE1 equ 08Ch ;# 
   249  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   250                           PCON equ 08Eh ;# 
   251  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   252                           OSCCAL equ 090h ;# 
   253  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   254                           WPUA equ 095h ;# 
   255  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   256                           WPU equ 095h ;# 
   257  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   258                           IOCA equ 096h ;# 
   259  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   260                           IOC equ 096h ;# 
   261  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   262                           VRCON equ 099h ;# 
   263  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   264                           EEDAT equ 09Ah ;# 
   265  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   266                           EEDATA equ 09Ah ;# 
   267  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   268                           EEADR equ 09Bh ;# 
   269  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   270                           EECON1 equ 09Ch ;# 
   271  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   272                           EECON2 equ 09Dh ;# 
   273  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   274                           INDF equ 00h ;# 
   275  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   276                           TMR0 equ 01h ;# 
   277  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   278                           PCL equ 02h ;# 
   279  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   280                           STATUS equ 03h ;# 
   281  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   282                           FSR equ 04h ;# 
   283  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   284                           PORTA equ 05h ;# 
   285  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   286                           PORTC equ 07h ;# 
   287  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   288                           PCLATH equ 0Ah ;# 
   289  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   290                           INTCON equ 0Bh ;# 
   291  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   292                           PIR1 equ 0Ch ;# 
   293  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   294                           TMR1 equ 0Eh ;# 
   295  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   296                           TMR1L equ 0Eh ;# 
   297  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   298                           TMR1H equ 0Fh ;# 
   299  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   300                           T1CON equ 010h ;# 
   301  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   302                           CMCON equ 019h ;# 
   303  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   304                           OPTION_REG equ 081h ;# 
   305  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   306                           TRISA equ 085h ;# 
   307  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   308                           TRISC equ 087h ;# 
   309  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   310                           PIE1 equ 08Ch ;# 
   311  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   312                           PCON equ 08Eh ;# 
   313  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   314                           OSCCAL equ 090h ;# 
   315  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   316                           WPUA equ 095h ;# 
   317  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   318                           WPU equ 095h ;# 
   319  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   320                           IOCA equ 096h ;# 
   321  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   322                           IOC equ 096h ;# 
   323  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   324                           VRCON equ 099h ;# 
   325  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   326                           EEDAT equ 09Ah ;# 
   327  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   328                           EEDATA equ 09Ah ;# 
   329  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   330                           EEADR equ 09Bh ;# 
   331  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   332                           EECON1 equ 09Ch ;# 
   333  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   334                           EECON2 equ 09Dh ;# 
   335  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   336                           INDF equ 00h ;# 
   337  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   338                           TMR0 equ 01h ;# 
   339  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   340                           PCL equ 02h ;# 
   341  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   342                           STATUS equ 03h ;# 
   343  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   344                           FSR equ 04h ;# 
   345  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   346                           PORTA equ 05h ;# 
   347  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   348                           PORTC equ 07h ;# 
   349  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   350                           PCLATH equ 0Ah ;# 
   351  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   352                           INTCON equ 0Bh ;# 
   353  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   354                           PIR1 equ 0Ch ;# 
   355  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   356                           TMR1 equ 0Eh ;# 
   357  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   358                           TMR1L equ 0Eh ;# 
   359  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   360                           TMR1H equ 0Fh ;# 
   361  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   362                           T1CON equ 010h ;# 
   363  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   364                           CMCON equ 019h ;# 
   365  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   366                           OPTION_REG equ 081h ;# 
   367  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   368                           TRISA equ 085h ;# 
   369  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   370                           TRISC equ 087h ;# 
   371  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   372                           PIE1 equ 08Ch ;# 
   373  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   374                           PCON equ 08Eh ;# 
   375  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   376                           OSCCAL equ 090h ;# 
   377  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   378                           WPUA equ 095h ;# 
   379  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   380                           WPU equ 095h ;# 
   381  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   382                           IOCA equ 096h ;# 
   383  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   384                           IOC equ 096h ;# 
   385  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   386                           VRCON equ 099h ;# 
   387  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   388                           EEDAT equ 09Ah ;# 
   389  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   390                           EEDATA equ 09Ah ;# 
   391  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   392                           EEADR equ 09Bh ;# 
   393  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   394                           EECON1 equ 09Ch ;# 
   395  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   396                           EECON2 equ 09Dh ;# 
   397  009D                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   398                           INDF equ 00h ;# 
   399  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   400                           TMR0 equ 01h ;# 
   401  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   402                           PCL equ 02h ;# 
   403  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   404                           STATUS equ 03h ;# 
   405  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   406                           FSR equ 04h ;# 
   407  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   408                           PORTA equ 05h ;# 
   409  0005                     # 218 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   410                           PORTC equ 07h ;# 
   411  0007                     # 268 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   412                           PCLATH equ 0Ah ;# 
   413  000A                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   414                           INTCON equ 0Bh ;# 
   415  000B                     # 366 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   416                           PIR1 equ 0Ch ;# 
   417  000C                     # 408 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   418                           TMR1 equ 0Eh ;# 
   419  000E                     # 415 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   420                           TMR1L equ 0Eh ;# 
   421  000E                     # 422 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   422                           TMR1H equ 0Fh ;# 
   423  000F                     # 429 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   424                           T1CON equ 010h ;# 
   425  0010                     # 494 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   426                           CMCON equ 019h ;# 
   427  0019                     # 553 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   428                           OPTION_REG equ 081h ;# 
   429  0081                     # 630 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   430                           TRISA equ 085h ;# 
   431  0085                     # 680 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   432                           TRISC equ 087h ;# 
   433  0087                     # 730 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   434                           PIE1 equ 08Ch ;# 
   435  008C                     # 772 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   436                           PCON equ 08Eh ;# 
   437  008E                     # 806 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   438                           OSCCAL equ 090h ;# 
   439  0090                     # 866 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   440                           WPUA equ 095h ;# 
   441  0095                     # 871 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   442                           WPU equ 095h ;# 
   443  0095                     # 954 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   444                           IOCA equ 096h ;# 
   445  0096                     # 959 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   446                           IOC equ 096h ;# 
   447  0096                     # 1052 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   448                           VRCON equ 099h ;# 
   449  0099                     # 1112 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   450                           EEDAT equ 09Ah ;# 
   451  009A                     # 1117 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   452                           EEDATA equ 09Ah ;# 
   453  009A                     # 1150 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   454                           EEADR equ 09Bh ;# 
   455  009B                     # 1157 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   456                           EECON1 equ 09Ch ;# 
   457  009C                     # 1195 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f630.h"
   458                           EECON2 equ 09Dh ;# 
   459  009D                     	FNCALL	_main,_BitDataInit
   460                           	FNCALL	_main,_Initialise
   461                           	FNROOT	_main
   462                           	FNCALL	_ISR,_BitIntr
   463                           	FNCALL	_ISR,_EdgeIntr
   464                           	FNCALL	_ISR,_SendModule
   465                           	FNCALL	_ISR,_StartTickTimer
   466                           	FNCALL	_StartTickTimer,_BitDataInit
   467                           	FNCALL	intlevel1,_ISR
   468                           	global	intlevel1
   469                           	FNROOT	intlevel1
   470                           	global	_BOX_ADDRESS
   471                           psect	strings,class=STRING,delta=2,noexec
   472                           global __pstrings
   473                           __pstrings:
   474  0129                     stringtab:
   475  0129                     	global    __stringtab
   476                           __stringtab:
   477  0129                     ;	String table - string pointers are 1 byte each
   478                           stringcode:stringdir:
   479  0129                     movlw high(stringdir)
      + 0129                     stringdir:	
   480  0129  3001               movwf pclath
   481  012A  008A               movf fsr,w
   482  012B  0804               incf fsr
   483  012C  0A84               	addwf pc
   484  012D  0782               	global __stringbase
   485                           __stringbase:
   486  012E                     	retlw	0
   487  012E  3400               psect	strings
   488                           	global    __end_of__stringtab
   489                           __end_of__stringtab:
   490  012F                     	file	"main.c"
   491                           	line	7
   492                           _BOX_ADDRESS:
   493  012F                     	retlw	low(0)
   494  012F  3400               	global __end_of_BOX_ADDRESS
   495                           __end_of_BOX_ADDRESS:
   496  0130                     	global	_BOX_ADDRESS
   497                           	global	_TickCount
   498                           	global	_EdgeDetect
   499                           	global	_Addressed
   500                           	global	_DataState
   501                           	global	_Lamps
   502                           	global	_BoxSize
   503                           	global	_BitCount
   504                           	global	_IntrData
   505                           	global	_RxData
   506                           	global	_IntrNewBit
   507                           	global	_TMR0
   508                           _TMR0	set	0x1
   509  0001                     	global	_PIR1bits
   510                           _PIR1bits	set	0xC
   511  000C                     	global	_TMR1L
   512                           _TMR1L	set	0xE
   513  000E                     	global	_TMR1H
   514                           _TMR1H	set	0xF
   515  000F                     	global	_T1CONbits
   516                           _T1CONbits	set	0x10
   517  0010                     	global	_CMCON
   518                           _CMCON	set	0x19
   519  0019                     	global	_INTCONbits
   520                           _INTCONbits	set	0xB
   521  000B                     	global	_RA2
   522                           _RA2	set	0x2A
   523  002A                     	global	_RC3
   524                           _RC3	set	0x3B
   525  003B                     	global	_RC5
   526                           _RC5	set	0x3D
   527  003D                     	global	_RC4
   528                           _RC4	set	0x3C
   529  003C                     	global	_RC1
   530                           _RC1	set	0x39
   531  0039                     	global	_PIE1bits
   532                           _PIE1bits	set	0x8C
   533  008C                     	global	_TRISC
   534                           _TRISC	set	0x87
   535  0087                     	global	_OPTION_REGbits
   536                           _OPTION_REGbits	set	0x81
   537  0081                     	global	_TRISA
   538                           _TRISA	set	0x85
   539  0085                     ; #config settings
   540                           global __CFG_FOSC$EC
   541                           __CFG_FOSC$EC equ 0x0
   542  0000                     global __CFG_WDTE$OFF
   543                           __CFG_WDTE$OFF equ 0x0
   544  0000                     global __CFG_PWRTE$OFF
   545                           __CFG_PWRTE$OFF equ 0x0
   546  0000                     global __CFG_MCLRE$OFF
   547                           __CFG_MCLRE$OFF equ 0x0
   548  0000                     global __CFG_BOREN$OFF
   549                           __CFG_BOREN$OFF equ 0x0
   550  0000                     global __CFG_CP$OFF
   551                           __CFG_CP$OFF equ 0x0
   552  0000                     global __CFG_CPD$OFF
   553                           __CFG_CPD$OFF equ 0x0
   554  0000                     	file	"C:\Users\abaker\AppData\Local\Temp\sms0."
   555                           	line	#
   556                           psect cinit,class=CODE,delta=2
   557                           global start_initialization
   558                           start_initialization:
   559  000C                     
   560                           global __initialization
   561                           __initialization:
   562  000C                     psect	bssBANK0,class=BANK0,space=1,noexec
   563                           global __pbssBANK0
   564                           __pbssBANK0:
   565  0020                     _TickCount:
   566  0020                            ds      1
   567  0020                     
   568                           _EdgeDetect:
   569  0021                            ds      1
   570  0021                     
   571                           _Addressed:
   572  0022                            ds      1
   573  0022                     
   574                           _DataState:
   575  0023                            ds      1
   576  0023                     
   577                           _Lamps:
   578  0024                            ds      1
   579  0024                     
   580                           _BoxSize:
   581  0025                            ds      1
   582  0025                     
   583                           _Address:
   584  0026                            ds      1
   585  0026                     
   586                           _Sync:
   587  0027                            ds      1
   588  0027                     
   589                           _BitCount:
   590  0028                            ds      1
   591  0028                     
   592                           _IntrData:
   593  0029                            ds      1
   594  0029                     
   595                           _RxData:
   596  002A                            ds      1
   597  002A                     
   598                           _IntrNewBit:
   599  002B                            ds      1
   600  002B                     
   601                           	file	"C:\Users\abaker\AppData\Local\Temp\sms0."
   602                           	line	#
   603                           psect clrtext,class=CODE,delta=2
   604                           global clear_ram0
   605                           ;	Called with FSR containing the base address, and
   606                           ;	W with the last address+1
   607                           clear_ram0:
   608  0121                     	clrwdt			;clear the watchdog before getting into this loop
   609  0121  0064               clrloop0:
   610  0122                     	clrf	indf		;clear RAM location pointed to by FSR
   611  0122  0180               	incf	fsr,f		;increment pointer
   612  0123  0A84               	xorwf	fsr,w		;XOR with final address
   613  0124  0604               	btfsc	status,2	;have we reached the end yet?
   614  0125  1903               	retlw	0		;all done for this memory range, return
   615  0126  3400               	xorwf	fsr,w		;XOR again to restore value
   616  0127  0604               	goto	clrloop0		;do the next byte
   617  0128  2922               
   618                           ; Clear objects allocated to BANK0
   619                           psect cinit,class=CODE,delta=2,merge=1
   620                           	bcf	status, 7	;select IRP bank0
   621  000C  1383               	movlw	low(__pbssBANK0)
   622  000D  3020               	movwf	fsr
   623  000E  0084               	movlw	low((__pbssBANK0)+0Ch)
   624  000F  302C               	fcall	clear_ram0
   625  0010  2121               psect cinit,class=CODE,delta=2,merge=1
   626                           global end_of_initialization,__end_of__initialization
   627                           
   628                           ;End of C runtime variable initialization code
   629                           
   630                           end_of_initialization:
   631  0011                     __end_of__initialization:
   632  0011                     clrf status
   633  0011  0183               ljmp _main	;jump to C main() function
   634  0012  2813               psect	cstackCOMMON,class=COMMON,space=1,noexec
   635                           global __pcstackCOMMON
   636                           __pcstackCOMMON:
   637  0000                     ??_Initialise:	; 1 bytes @ 0x0
   638  0000                     ??_BitDataInit:	; 1 bytes @ 0x0
   639  0000                     ??_EdgeIntr:	; 1 bytes @ 0x0
   640  0000                     ??_BitIntr:	; 1 bytes @ 0x0
   641  0000                     ??_SendModule:	; 1 bytes @ 0x0
   642  0000                     psect	cstackBANK0,class=BANK0,space=1,noexec
   643                           global __pcstackBANK0
   644                           __pcstackBANK0:
   645  002C                     ?_Initialise:	; 1 bytes @ 0x0
   646  002C                     ?_BitDataInit:	; 1 bytes @ 0x0
   647  002C                     ?_main:	; 1 bytes @ 0x0
   648  002C                     ?_StartTickTimer:	; 1 bytes @ 0x0
   649  002C                     ?_EdgeIntr:	; 1 bytes @ 0x0
   650  002C                     ?_BitIntr:	; 1 bytes @ 0x0
   651  002C                     ?_SendModule:	; 1 bytes @ 0x0
   652  002C                     ?_ISR:	; 1 bytes @ 0x0
   653  002C                     	global	BitDataInit@ModeTx
   654                           BitDataInit@ModeTx:	; 1 bytes @ 0x0
   655  002C                     	ds	1
   656  002C                     	global	BitDataInit@IntEnable
   657                           BitDataInit@IntEnable:	; 1 bytes @ 0x1
   658  002D                     	ds	1
   659  002D                     ??_StartTickTimer:	; 1 bytes @ 0x2
   660  002E                     	ds	1
   661  002E                     ??_ISR:	; 1 bytes @ 0x3
   662  002F                     	ds	3
   663  002F                     ??_main:	; 1 bytes @ 0x6
   664  0032                     	ds	1
   665  0032                     ;!
   666                           ;!Data Sizes:
   667                           ;!    Strings     0
   668                           ;!    Constant    1
   669                           ;!    Data        0
   670                           ;!    BSS         12
   671                           ;!    Persistent  0
   672                           ;!    Stack       0
   673                           ;!
   674                           ;!Auto Spaces:
   675                           ;!    Space          Size  Autos    Used
   676                           ;!    COMMON            0      0       0
   677                           ;!    BANK0            62      7      19
   678                           
   679                           ;!
   680                           ;!Pointer List with Targets:
   681                           ;!
   682                           ;!    None.
   683                           
   684                           
   685                           ;!
   686                           ;!Critical Paths under _main in COMMON
   687                           ;!
   688                           ;!    None.
   689                           ;!
   690                           ;!Critical Paths under _ISR in COMMON
   691                           ;!
   692                           ;!    None.
   693                           ;!
   694                           ;!Critical Paths under _main in BANK0
   695                           ;!
   696                           ;!    None.
   697                           ;!
   698                           ;!Critical Paths under _ISR in BANK0
   699                           ;!
   700                           ;!    _ISR->_StartTickTimer
   701                           
   702 ;;
   703 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   704 ;;
   705                           
   706                           ;!
   707                           ;!Call Graph Tables:
   708                           ;!
   709                           ;! ---------------------------------------------------------------------------------
   710                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   711                           ;! ---------------------------------------------------------------------------------
   712                           ;! (0) _main                                                 1     1      0      45
   713                           ;!                                              6 BANK0      1     1      0
   714                           ;!                        _BitDataInit
   715                           ;!                         _Initialise
   716                           ;! ---------------------------------------------------------------------------------
   717                           ;! (1) _Initialise                                           0     0      0       0
   718                           ;! ---------------------------------------------------------------------------------
   719                           ;! (4) _BitDataInit                                          2     2      0      45
   720                           ;! ---------------------------------------------------------------------------------
   721                           ;! Estimated maximum stack depth 4
   722                           ;! ---------------------------------------------------------------------------------
   723                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   724                           ;! ---------------------------------------------------------------------------------
   725                           ;! (2) _ISR                                                  3     3      0      45
   726                           ;!                                              3 BANK0      3     3      0
   727                           ;!                            _BitIntr
   728                           ;!                           _EdgeIntr
   729                           ;!                         _SendModule
   730                           ;!                     _StartTickTimer
   731                           ;! ---------------------------------------------------------------------------------
   732                           ;! (3) _StartTickTimer                                       1     1      0      45
   733                           ;!                                              2 BANK0      1     1      0
   734                           ;!                        _BitDataInit
   735                           ;! ---------------------------------------------------------------------------------
   736                           ;! (4) _BitDataInit                                          2     2      0      45
   737                           ;! ---------------------------------------------------------------------------------
   738                           ;! (3) _SendModule                                           0     0      0       0
   739                           ;! ---------------------------------------------------------------------------------
   740                           ;! (3) _EdgeIntr                                             0     0      0       0
   741                           ;! ---------------------------------------------------------------------------------
   742                           ;! (3) _BitIntr                                              0     0      0       0
   743                           ;! ---------------------------------------------------------------------------------
   744                           ;! Estimated maximum stack depth 4
   745                           ;! ---------------------------------------------------------------------------------
   746                           ;!
   747                           ;! Call Graph Graphs:
   748                           ;!
   749                           ;! _main (ROOT)
   750                           ;!   _BitDataInit
   751                           ;!   _Initialise
   752                           ;!
   753                           ;! _ISR (ROOT)
   754                           ;!   _BitIntr
   755                           ;!   _EdgeIntr
   756                           ;!   _SendModule
   757                           ;!   _StartTickTimer
   758                           ;!     _BitDataInit
   759                           ;!
   760                           
   761                           ;! Address spaces:
   762                           
   763                           ;!Name               Size   Autos  Total    Cost      Usage
   764                           ;!BITCOMMON            0      0       0       0        0.0%
   765                           ;!EEDATA              80      0       0       0        0.0%
   766                           ;!NULL                 0      0       0       0        0.0%
   767                           ;!CODE                 0      0       0       0        0.0%
   768                           ;!BITSFR0              0      0       0       1        0.0%
   769                           ;!SFR0                 0      0       0       1        0.0%
   770                           ;!COMMON               0      0       0       1        0.0%
   771                           ;!BITSFR1              0      0       0       2        0.0%
   772                           ;!SFR1                 0      0       0       2        0.0%
   773                           ;!STACK                0      0       0       2        0.0%
   774                           ;!BITBANK0            3E      0       0       3        0.0%
   775                           ;!BANK0               3E      7      13       4       30.6%
   776                           ;!ABS                  0      0      13       5        0.0%
   777                           ;!DATA                 0      0      13       6        0.0%
   778                           
   779                           	global	_main
   780                           
   781 ;; *************** function _main *****************
   782 ;; Defined at:
   783 ;;		line 63 in file "main.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;		None
   786 ;; Auto vars:     Size  Location     Type
   787 ;;		None
   788 ;; Return value:  Size  Location     Type
   789 ;;                  1    wreg      void 
   790 ;; Registers used:
   791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   792 ;; Tracked objects:
   793 ;;		On entry : B00/0
   794 ;;		On exit  : 0/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMMON   BANK0
   797 ;;      Params:         0       0
   798 ;;      Locals:         0       0
   799 ;;      Temps:          0       1
   800 ;;      Totals:         0       1
   801 ;;Total ram usage:        1 bytes
   802 ;; Hardware stack levels required when called:    4
   803 ;; This function calls:
   804 ;;		_BitDataInit
   805 ;;		_Initialise
   806 ;; This function is called by:
   807 ;;		Startup code after reset
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   811                           	file	"main.c"
   812                           	line	63
   813                           global __pmaintext
   814                           __pmaintext:	;psect for function _main
   815  0013                     psect	maintext
   816                           	file	"main.c"
   817                           	line	63
   818                           	global	__size_of_main
   819                           	__size_of_main	equ	__end_of_main-_main
   820  0088                     	
   821                           _main:	
   822  0013                     ;incstack = 0
   823                           	opt	stack 4
   824                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   825                           	line	65
   826                           	
   827                           l932:	
   828  0013                     ;main.c: 65: 
   829                           	fcall	_Initialise
   830  0013  20C7               	line	68
   831                           ;main.c: 68: 
   832                           	movlw	low(0)
   833  0014  3000               	fcall	_BitDataInit
   834  0015  20E3               	line	71
   835                           	
   836                           l934:	
   837  0016                     ;main.c: 71: 
   838                           	bsf	(11),7	;volatile
   839  0016  178B               	goto	l936
   840  0017  2818               	line	73
   841                           ;main.c: 73:                     if ((RxData&0xF)==0x09)
   842                           	
   843                           l42:	
   844  0018                     	line	75
   845                           	
   846                           l936:	
   847  0018                     ;main.c: 74:                     {;main.c: 75: 
   848                           	bcf	status, 5	;RP0=0, select bank0
   849  0018  1283               		decf	((_IntrNewBit)),w
   850  0019  032B               	btfss	status,2
   851  001A  1D03               	goto	u191
   852  001B  281D               	goto	u190
   853  001C  281E               u191:
   854  001D                     	goto	l936
   855  001D  2818               u190:
   856  001E                     	line	81
   857                           	
   858                           l938:	
   859  001E                     ;main.c: 76:                         RC5=1;;main.c: 81:                         DataStat
                                 e = DATA_SYNC;
   860                           	bcf	(11),5	;volatile
   861  001E  128B               	line	82
   862                           	
   863                           l940:	
   864  001F                     ;main.c: 82:                     }
   865                           	movf	(_IntrData),w
   866  001F  0829               	movwf	(??_main+0)+0
   867  0020  00B2               	movf	(??_main+0)+0,w
   868  0021  0832               	movwf	(_RxData)
   869  0022  00AA               	line	83
   870                           	
   871                           l942:	
   872  0023                     ;main.c: 83:                 }
   873                           	clrf	(_IntrNewBit)
   874  0023  01AB               	line	84
   875                           	
   876                           l944:	
   877  0024                     ;main.c: 84:             }
   878                           	bcf	(11),5	;volatile
   879  0024  128B               	line	87
   880                           	
   881                           l946:	
   882  0025                     ;main.c: 87: 
   883                           	movlw	low(01h)
   884  0025  3001               	movwf	(??_main+0)+0
   885  0026  00B2               	movf	(??_main+0)+0,w
   886  0027  0832               	addwf	(_BitCount),f
   887  0028  07A8               	line	90
   888                           	
   889                           l948:	
   890  0029                     ;main.c: 90:                     BitCount = 0;
   891                           	movf	((_DataState)),w
   892  0029  0823               	btfss	status,2
   893  002A  1D03               	goto	u201
   894  002B  282D               	goto	u200
   895  002C  282E               u201:
   896  002D                     	goto	l958
   897  002D  2840               u200:
   898  002E                     	line	96
   899                           	
   900                           l950:	
   901  002E                     ;main.c: 91: ;main.c: 96: 
   902                           	bsf	(60/8),(60)&7	;volatile
   903  002E  1607               	line	97
   904                           ;main.c: 97:                     }
   905                           	bcf	(60/8),(60)&7	;volatile
   906  002F  1207               	line	103
   907                           	
   908                           l952:	
   909  0030                     ;main.c: 102: ;main.c: 103:                     DataState = DATA_SIZE;
   910                           	movlw	low(0Fh)
   911  0030  300F               	andwf	(_RxData),w
   912  0031  052A               	movwf	(??_main+0)+0
   913  0032  00B2               		movlw	9
   914  0033  3009               	xorwf	((??_main+0)+0),w
   915  0034  0632               	btfss	status,2
   916  0035  1D03               	goto	u211
   917  0036  2838               	goto	u210
   918  0037  2839               u211:
   919  0038                     	goto	l936
   920  0038  2818               u210:
   921  0039                     	line	106
   922                           	
   923                           l954:	
   924  0039                     ;main.c: 104:                 };main.c: 106:             else if (DataState==DATA_SIZE)

   925                           	bsf	(61/8),(61)&7	;volatile
   926  0039  1687               	line	107
   927                           ;main.c: 107:             {
   928                           	bcf	(61/8),(61)&7	;volatile
   929  003A  1287               	line	109
   930                           	
   931                           l956:	
   932  003B                     ;main.c: 109:                 if (BitCount>=5)
   933                           	clrf	(_BitCount)
   934  003B  01A8               	line	110
   935                           ;main.c: 110:                 {
   936                           	clrf	(_Addressed)
   937  003C  01A2               	line	111
   938                           ;main.c: 111:                     BitCount = 0;
   939                           	clrf	(_DataState)
   940  003D  01A3               	goto	l936
   941  003E  2818               	line	112
   942                           ;main.c: 112: 
   943                           	
   944                           l45:	
   945  003F                     	line	114
   946                           ;main.c: 113:                     BoxSize = RxData&0x1F;;main.c: 114:                   
                                   DataState = DATA_LAMPS;
   947                           	goto	l936
   948  003F  2818               	line	115
   949                           ;main.c: 115:                 }
   950                           	
   951                           l44:	
   952  0040                     	
   953                           l958:	
   954  0040                     		decf	((_DataState)),w
   955  0040  0323               	btfss	status,2
   956  0041  1D03               	goto	u221
   957  0042  2844               	goto	u220
   958  0043  2845               u221:
   959  0044                     	goto	l972
   960  0044  2862               u220:
   961  0045                     	line	118
   962                           	
   963                           l960:	
   964  0045                     ;main.c: 116:             };main.c: 118:             {
   965                           	movlw	low(05h)
   966  0045  3005               	subwf	(_BitCount),w
   967  0046  0228               	skipc
   968  0047  1C03               	goto	u231
   969  0048  284A               	goto	u230
   970  0049  284B               u231:
   971  004A                     	goto	l936
   972  004A  2818               u230:
   973  004B                     	line	120
   974                           	
   975                           l962:	
   976  004B                     ;main.c: 119: ;main.c: 120: 
   977                           	clrf	(_BitCount)
   978  004B  01A8               	line	122
   979                           	
   980                           l964:	
   981  004C                     ;main.c: 122:                 {
   982                           	movlw	low((_BOX_ADDRESS-__stringbase))
   983  004C  3001               	movwf	fsr0
   984  004D  0084               	fcall	stringdir
   985  004E  2129               	movwf	(??_main+0)+0
   986  004F  00B2               	movf	(_RxData),w
   987  0050  082A               	andlw	01Fh
   988  0051  391F               	xorwf	(??_main+0)+0,w
   989  0052  0632               	skipz
   990  0053  1D03               	goto	u241
   991  0054  2856               	goto	u240
   992  0055  2857               u241:
   993  0056                     	goto	l968
   994  0056  285A               u240:
   995  0057                     	line	124
   996                           	
   997                           l966:	
   998  0057                     ;main.c: 123:                     Lamps = RxData;;main.c: 124: 
   999                           	clrf	(_Addressed)
  1000  0057  01A2               	incf	(_Addressed),f
  1001  0058  0AA2               	line	127
  1002                           ;main.c: 127: 
  1003                           	goto	l970
  1004  0059  285C               	line	128
  1005                           ;main.c: 128:                 if (BitCount>=BoxSize)
  1006                           	
  1007                           l49:	
  1008  005A                     	line	130
  1009                           	
  1010                           l968:	
  1011  005A                     ;main.c: 129:                     BitCount = 0;;main.c: 130:                     DataSta
                                 te = DATA_ADDRESS;
  1012                           	clrf	(_Addressed)
  1013  005A  01A2               	goto	l970
  1014  005B  285C               	line	131
  1015                           ;main.c: 131: 
  1016                           	
  1017                           l50:	
  1018  005C                     	line	133
  1019                           	
  1020                           l970:	
  1021  005C                     ;main.c: 133:         }
  1022                           	movlw	low(02h)
  1023  005C  3002               	movwf	(??_main+0)+0
  1024  005D  00B2               	movf	(??_main+0)+0,w
  1025  005E  0832               	movwf	(_DataState)
  1026  005F  00A3               	goto	l936
  1027  0060  2818               	line	134
  1028                           ;main.c: 134:     }
  1029                           	
  1030                           l48:	
  1031  0061                     	line	135
  1032                           ;main.c: 135: 
  1033                           	goto	l936
  1034  0061  2818               	line	136
  1035                           ;main.c: 136: }
  1036                           	
  1037                           l47:	
  1038  0062                     	
  1039                           l972:	
  1040  0062                     		movlw	2
  1041  0062  3002               	xorwf	((_DataState)),w
  1042  0063  0623               	btfss	status,2
  1043  0064  1D03               	goto	u251
  1044  0065  2867               	goto	u250
  1045  0066  2868               u251:
  1046  0067                     	goto	l980
  1047  0067  287A               u250:
  1048  0068                     	line	139
  1049                           	
  1050                           l974:	
  1051  0068                     	movlw	low(05h)
  1052  0068  3005               	subwf	(_BitCount),w
  1053  0069  0228               	skipc
  1054  006A  1C03               	goto	u261
  1055  006B  286D               	goto	u260
  1056  006C  286E               u261:
  1057  006D                     	goto	l936
  1058  006D  2818               u260:
  1059  006E                     	line	141
  1060                           	
  1061                           l976:	
  1062  006E                     	clrf	(_BitCount)
  1063  006E  01A8               	line	143
  1064                           	
  1065                           l978:	
  1066  006F                     	movf	(_RxData),w
  1067  006F  082A               	andlw	01Fh
  1068  0070  391F               	movwf	(??_main+0)+0
  1069  0071  00B2               	movf	(??_main+0)+0,w
  1070  0072  0832               	movwf	(_BoxSize)
  1071  0073  00A5               	line	144
  1072                           	movlw	low(03h)
  1073  0074  3003               	movwf	(??_main+0)+0
  1074  0075  00B2               	movf	(??_main+0)+0,w
  1075  0076  0832               	movwf	(_DataState)
  1076  0077  00A3               	goto	l936
  1077  0078  2818               	line	145
  1078                           	
  1079                           l53:	
  1080  0079                     	line	146
  1081                           	goto	l936
  1082  0079  2818               	line	147
  1083                           	
  1084                           l52:	
  1085  007A                     	
  1086                           l980:	
  1087  007A                     		movlw	3
  1088  007A  3003               	xorwf	((_DataState)),w
  1089  007B  0623               	btfss	status,2
  1090  007C  1D03               	goto	u271
  1091  007D  287F               	goto	u270
  1092  007E  2880               u271:
  1093  007F                     	goto	l936
  1094  007F  2818               u270:
  1095  0080                     	line	151
  1096                           	
  1097                           l982:	
  1098  0080                     		decf	((_Addressed)),w
  1099  0080  0322               	btfss	status,2
  1100  0081  1D03               	goto	u281
  1101  0082  2884               	goto	u280
  1102  0083  2885               u281:
  1103  0084                     	goto	l56
  1104  0084  2889               u280:
  1105  0085                     	line	153
  1106                           	
  1107                           l984:	
  1108  0085                     	movf	(_RxData),w
  1109  0085  082A               	movwf	(??_main+0)+0
  1110  0086  00B2               	movf	(??_main+0)+0,w
  1111  0087  0832               	movwf	(_Lamps)
  1112  0088  00A4               	line	156
  1113                           	
  1114                           l56:	
  1115  0089                     	line	158
  1116                           	movf	(_BoxSize),w
  1117  0089  0825               	subwf	(_BitCount),w
  1118  008A  0228               	skipc
  1119  008B  1C03               	goto	u291
  1120  008C  288E               	goto	u290
  1121  008D  288F               u291:
  1122  008E                     	goto	l988
  1123  008E  2891               u290:
  1124  008F                     	line	159
  1125                           	
  1126                           l986:	
  1127  008F                     	clrf	(_BitCount)
  1128  008F  01A8               	goto	l988
  1129  0090  2891               	
  1130                           l57:	
  1131  0091                     	line	160
  1132                           	
  1133                           l988:	
  1134  0091                     	clrf	(_DataState)
  1135  0091  01A3               	incf	(_DataState),f
  1136  0092  0AA3               	goto	l936
  1137  0093  2818               	line	162
  1138                           	
  1139                           l55:	
  1140  0094                     	goto	l936
  1141  0094  2818               	
  1142                           l54:	
  1143  0095                     	goto	l936
  1144  0095  2818               	
  1145                           l51:	
  1146  0096                     	goto	l936
  1147  0096  2818               	
  1148                           l46:	
  1149  0097                     	goto	l936
  1150  0097  2818               	line	163
  1151                           	
  1152                           l43:	
  1153  0098                     	goto	l936
  1154  0098  2818               	line	164
  1155                           	
  1156                           l58:	
  1157  0099                     	goto	l936
  1158  0099  2818               	
  1159                           l59:	
  1160  009A                     	line	166
  1161                           	
  1162                           l60:	
  1163  009A                     	global	start
  1164                           	ljmp	start
  1165  009A  280B               	opt stack 0
  1166                           GLOBAL	__end_of_main
  1167                           	__end_of_main:
  1168  009B                     	signat	_main,89
  1169                           	global	_Initialise
  1170                           
  1171 ;; *************** function _Initialise *****************
  1172 ;; Defined at:
  1173 ;;		line 14 in file "system.c"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;		None
  1176 ;; Auto vars:     Size  Location     Type
  1177 ;;		None
  1178 ;; Return value:  Size  Location     Type
  1179 ;;                  1    wreg      void 
  1180 ;; Registers used:
  1181 ;;		wreg, status,2, status,0
  1182 ;; Tracked objects:
  1183 ;;		On entry : 0/0
  1184 ;;		On exit  : 0/0
  1185 ;;		Unchanged: 0/0
  1186 ;; Data sizes:     COMMON   BANK0
  1187 ;;      Params:         0       0
  1188 ;;      Locals:         0       0
  1189 ;;      Temps:          0       0
  1190 ;;      Totals:         0       0
  1191 ;;Total ram usage:        0 bytes
  1192 ;; Hardware stack levels used:    1
  1193 ;; Hardware stack levels required when called:    3
  1194 ;; This function calls:
  1195 ;;		Nothing
  1196 ;; This function is called by:
  1197 ;;		_main
  1198 ;; This function uses a non-reentrant model
  1199 ;;
  1200                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
  1201                           	file	"system.c"
  1202                           	line	14
  1203                           global __ptext1
  1204                           __ptext1:	;psect for function _Initialise
  1205  00C7                     psect	text1
  1206                           	file	"system.c"
  1207                           	line	14
  1208                           	global	__size_of_Initialise
  1209                           	__size_of_Initialise	equ	__end_of_Initialise-_Initialise
  1210  001C                     	
  1211                           _Initialise:	
  1212  00C7                     ;incstack = 0
  1213                           	opt	stack 4
  1214                           ; Regs used in _Initialise: [wreg+status,2+status,0]
  1215                           	line	17
  1216                           	
  1217                           l876:	
  1218  00C7                     ;system.c: 17:     CMCON = 0x07;
  1219                           	movlw	low(07h)
  1220  00C7  3007               	bcf	status, 5	;RP0=0, select bank0
  1221  00C8  1283               	movwf	(25)	;volatile
  1222  00C9  0099               	line	18
  1223                           ;system.c: 18:     TRISA = 0x3F;
  1224                           	movlw	low(03Fh)
  1225  00CA  303F               	bsf	status, 5	;RP0=1, select bank1
  1226  00CB  1683               	movwf	(133)^080h	;volatile
  1227  00CC  0085               	line	19
  1228                           	
  1229                           l878:	
  1230  00CD                     ;system.c: 19:     OPTION_REGbits.INTEDG = 1;
  1231                           	bsf	(129)^080h,6	;volatile
  1232  00CD  1701               	line	22
  1233                           	
  1234                           l880:	
  1235  00CE                     ;system.c: 22:     TRISC = 0;
  1236                           	clrf	(135)^080h	;volatile
  1237  00CE  0187               	line	25
  1238                           	
  1239                           l882:	
  1240  00CF                     ;system.c: 25:     T1CONbits.TMR1CS = 0;
  1241                           	bcf	status, 5	;RP0=0, select bank0
  1242  00CF  1283               	bcf	(16),1	;volatile
  1243  00D0  1090               	line	26
  1244                           	
  1245                           l884:	
  1246  00D1                     ;system.c: 26:     T1CONbits.T1CKPS = 0;
  1247                           	movlw	((0 & ((1<<2)-1))<<4)|not (((1<<2)-1)<<4)
  1248  00D1  30CF               	andwf	(16),f	;volatile
  1249  00D2  0590               	line	27
  1250                           	
  1251                           l886:	
  1252  00D3                     ;system.c: 27:     T1CONbits.nT1SYNC = 1;
  1253                           	bsf	(16),2	;volatile
  1254  00D3  1510               	line	28
  1255                           	
  1256                           l888:	
  1257  00D4                     ;system.c: 28:     T1CONbits.TMR1GE = 0;
  1258                           	bcf	(16),6	;volatile
  1259  00D4  1310               	line	29
  1260                           	
  1261                           l890:	
  1262  00D5                     ;system.c: 29:     TMR1H = 0x3C;
  1263                           	movlw	low(03Ch)
  1264  00D5  303C               	movwf	(15)	;volatile
  1265  00D6  008F               	line	30
  1266                           	
  1267                           l892:	
  1268  00D7                     ;system.c: 30:     TMR1L = 0xB0;
  1269                           	movlw	low(0B0h)
  1270  00D7  30B0               	movwf	(14)	;volatile
  1271  00D8  008E               	line	31
  1272                           	
  1273                           l894:	
  1274  00D9                     ;system.c: 31:     PIR1bits.TMR1IF = 0;
  1275                           	bcf	(12),0	;volatile
  1276  00D9  100C               	line	32
  1277                           	
  1278                           l896:	
  1279  00DA                     ;system.c: 32:     PIE1bits.TMR1IE = 1;
  1280                           	bsf	status, 5	;RP0=1, select bank1
  1281  00DA  1683               	bsf	(140)^080h,0	;volatile
  1282  00DB  140C               	line	33
  1283                           	
  1284                           l898:	
  1285  00DC                     ;system.c: 33:     T1CONbits.TMR1ON = 1;
  1286                           	bcf	status, 5	;RP0=0, select bank0
  1287  00DC  1283               	bsf	(16),0	;volatile
  1288  00DD  1410               	line	34
  1289                           	
  1290                           l900:	
  1291  00DE                     ;system.c: 34:     INTCONbits.PEIE = 1;
  1292                           	bsf	(11),6	;volatile
  1293  00DE  170B               	line	38
  1294                           	
  1295                           l902:	
  1296  00DF                     ;system.c: 38:     OPTION_REGbits.T0CS = 0;
  1297                           	bsf	status, 5	;RP0=1, select bank1
  1298  00DF  1683               	bcf	(129)^080h,5	;volatile
  1299  00E0  1281               	line	39
  1300                           	
  1301                           l904:	
  1302  00E1                     ;system.c: 39:     OPTION_REGbits.PSA = 1;
  1303                           	bsf	(129)^080h,3	;volatile
  1304  00E1  1581               	line	48
  1305                           	
  1306                           l83:	
  1307  00E2                     	return
  1308  00E2  0008               	opt stack 0
  1309                           GLOBAL	__end_of_Initialise
  1310                           	__end_of_Initialise:
  1311  00E3                     	signat	_Initialise,89
  1312                           	global	_ISR
  1313                           
  1314 ;; *************** function _ISR *****************
  1315 ;; Defined at:
  1316 ;;		line 16 in file "interrupts.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;		None
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;		None
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg, status,2, status,0, pclath, cstack
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMMON   BANK0
  1330 ;;      Params:         0       0
  1331 ;;      Locals:         0       0
  1332 ;;      Temps:          0       3
  1333 ;;      Totals:         0       3
  1334 ;;Total ram usage:        3 bytes
  1335 ;; Hardware stack levels used:    1
  1336 ;; Hardware stack levels required when called:    2
  1337 ;; This function calls:
  1338 ;;		_BitIntr
  1339 ;;		_EdgeIntr
  1340 ;;		_SendModule
  1341 ;;		_StartTickTimer
  1342 ;; This function is called by:
  1343 ;;		Interrupt level 1
  1344 ;; This function uses a non-reentrant model
  1345 ;;
  1346                           psect	text2,local,class=CODE,delta=2,merge=1,group=0
  1347                           	file	"interrupts.c"
  1348                           	line	16
  1349                           global __ptext2
  1350                           __ptext2:	;psect for function _ISR
  1351  009B                     psect	text2
  1352                           	file	"interrupts.c"
  1353                           	line	16
  1354                           	global	__size_of_ISR
  1355                           	__size_of_ISR	equ	__end_of_ISR-_ISR
  1356  002C                     	
  1357                           _ISR:	
  1358  009B                     ;incstack = 0
  1359                           	opt	stack 4
  1360                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  1361                           psect	intentry,class=CODE,delta=2
  1362                           global __pintentry
  1363                           __pintentry:
  1364  0004                     global interrupt_function
  1365                           interrupt_function:
  1366  0004                     	global saved_w
  1367                           	saved_w	set	btemp+0
  1368  005E                     	movwf	saved_w
  1369  0004  00DE               	swapf	status,w
  1370  0005  0E03               	bcf	status, 5	;RP0=0, select bank0
  1371  0006  1283               	movwf	(??_ISR+1)
  1372  0007  00B0               	movf	pclath,w
  1373  0008  080A               	movwf	(??_ISR+2)
  1374  0009  00B1               	ljmp	_ISR
  1375  000A  289B               psect	text2
  1376                           	line	20
  1377                           	
  1378                           i1l1022:	
  1379  009B                     ;interrupts.c: 20:     if (PIR1bits.TMR1IF==1)
  1380                           	btfss	(12),0	;volatile
  1381  009B  1C0C               	goto	u35_21
  1382  009C  289E               	goto	u35_20
  1383  009D  289F               u35_21:
  1384  009E                     	goto	i1l1034
  1385  009E  28B1               u35_20:
  1386  009F                     	line	22
  1387                           	
  1388                           i1l1024:	
  1389  009F                     ;interrupts.c: 21:     {;interrupts.c: 22:         StartTickTimer();
  1390                           	fcall	_StartTickTimer
  1391  009F  20FE               	line	25
  1392                           	
  1393                           i1l1026:	
  1394  00A0                     ;interrupts.c: 25:         if (TickCount==9)
  1395                           		movlw	9
  1396  00A0  3009               	bcf	status, 5	;RP0=0, select bank0
  1397  00A1  1283               	xorwf	((_TickCount)),w
  1398  00A2  0620               	btfss	status,2
  1399  00A3  1D03               	goto	u36_21
  1400  00A4  28A6               	goto	u36_20
  1401  00A5  28A7               u36_21:
  1402  00A6                     	goto	i1l1032
  1403  00A6  28AA               u36_20:
  1404  00A7                     	line	27
  1405                           	
  1406                           i1l1028:	
  1407  00A7                     ;interrupts.c: 26:         {;interrupts.c: 27:             TickCount = 0;
  1408                           	clrf	(_TickCount)
  1409  00A7  01A0               	line	28
  1410                           	
  1411                           i1l1030:	
  1412  00A8                     ;interrupts.c: 28:             SendModule();
  1413                           	fcall	_SendModule
  1414  00A8  2137               	line	29
  1415                           ;interrupts.c: 29:         }
  1416                           	goto	i1l1034
  1417  00A9  28B1               	line	30
  1418                           ;interrupts.c: 30:         else
  1419                           	
  1420                           i1l143:	
  1421  00AA                     	line	32
  1422                           	
  1423                           i1l1032:	
  1424  00AA                     ;interrupts.c: 31:         {;interrupts.c: 32:             TickCount++;
  1425                           	movlw	low(01h)
  1426  00AA  3001               	bcf	status, 5	;RP0=0, select bank0
  1427  00AB  1283               	movwf	(??_ISR+0)+0
  1428  00AC  00AF               	movf	(??_ISR+0)+0,w
  1429  00AD  082F               	addwf	(_TickCount),f
  1430  00AE  07A0               	goto	i1l1034
  1431  00AF  28B1               	line	33
  1432                           ;interrupts.c: 33:         }
  1433                           	
  1434                           i1l144:	
  1435  00B0                     	goto	i1l1034
  1436  00B0  28B1               	line	34
  1437                           ;interrupts.c: 34:     }
  1438                           	
  1439                           i1l142:	
  1440  00B1                     	line	38
  1441                           	
  1442                           i1l1034:	
  1443  00B1                     ;interrupts.c: 38:     if (INTCONbits.INTF)
  1444                           	btfss	(11),1	;volatile
  1445  00B1  1C8B               	goto	u37_21
  1446  00B2  28B4               	goto	u37_20
  1447  00B3  28B5               u37_21:
  1448  00B4                     	goto	i1l1040
  1449  00B4  28B8               u37_20:
  1450  00B5                     	line	40
  1451                           	
  1452                           i1l1036:	
  1453  00B5                     ;interrupts.c: 39:     {;interrupts.c: 40:         INTCONbits.INTF = 0;
  1454                           	bcf	(11),1	;volatile
  1455  00B5  108B               	line	42
  1456                           	
  1457                           i1l1038:	
  1458  00B6                     ;interrupts.c: 42:         EdgeIntr();
  1459                           	fcall	_EdgeIntr
  1460  00B6  2130               	goto	i1l1040
  1461  00B7  28B8               	line	59
  1462                           ;interrupts.c: 59:     }
  1463                           	
  1464                           i1l145:	
  1465  00B8                     	line	62
  1466                           	
  1467                           i1l1040:	
  1468  00B8                     ;interrupts.c: 62:     if (INTCONbits.T0IF==1)
  1469                           	btfss	(11),2	;volatile
  1470  00B8  1D0B               	goto	u38_21
  1471  00B9  28BB               	goto	u38_20
  1472  00BA  28BC               u38_21:
  1473  00BB                     	goto	i1l147
  1474  00BB  28BF               u38_20:
  1475  00BC                     	line	64
  1476                           	
  1477                           i1l1042:	
  1478  00BC                     ;interrupts.c: 63:     {;interrupts.c: 64:         INTCONbits.T0IF= 0;
  1479                           	bcf	(11),2	;volatile
  1480  00BC  110B               	line	65
  1481                           	
  1482                           i1l1044:	
  1483  00BD                     ;interrupts.c: 65:         BitIntr();
  1484                           	fcall	_BitIntr
  1485  00BD  2114               	goto	i1l147
  1486  00BE  28BF               	line	66
  1487                           ;interrupts.c: 66:     }
  1488                           	
  1489                           i1l146:	
  1490  00BF                     	line	68
  1491                           	
  1492                           i1l147:	
  1493  00BF                     	bcf	status, 5	;RP0=0, select bank0
  1494  00BF  1283               	movf	(??_ISR+2),w
  1495  00C0  0831               	movwf	pclath
  1496  00C1  008A               	swapf	(??_ISR+1)^00h,w
  1497  00C2  0E30               	movwf	status
  1498  00C3  0083               	swapf	saved_w,f
  1499  00C4  0EDE               	swapf	saved_w,w
  1500  00C5  0E5E               	retfie
  1501  00C6  0009               	opt stack 0
  1502                           GLOBAL	__end_of_ISR
  1503                           	__end_of_ISR:
  1504  00C7                     	signat	_ISR,89
  1505                           	global	_StartTickTimer
  1506                           
  1507 ;; *************** function _StartTickTimer *****************
  1508 ;; Defined at:
  1509 ;;		line 24 in file "user.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;		None
  1512 ;; Auto vars:     Size  Location     Type
  1513 ;;		None
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      void 
  1516 ;; Registers used:
  1517 ;;		wreg, status,2, status,0, pclath, cstack
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMMON   BANK0
  1523 ;;      Params:         0       0
  1524 ;;      Locals:         0       0
  1525 ;;      Temps:          0       1
  1526 ;;      Totals:         0       1
  1527 ;;Total ram usage:        1 bytes
  1528 ;; Hardware stack levels used:    1
  1529 ;; Hardware stack levels required when called:    1
  1530 ;; This function calls:
  1531 ;;		_BitDataInit
  1532 ;; This function is called by:
  1533 ;;		_ISR
  1534 ;; This function uses a non-reentrant model
  1535 ;;
  1536                           psect	text3,local,class=CODE,delta=2,merge=1,group=0
  1537                           	file	"user.c"
  1538                           	line	24
  1539                           global __ptext3
  1540                           __ptext3:	;psect for function _StartTickTimer
  1541  00FE                     psect	text3
  1542                           	file	"user.c"
  1543                           	line	24
  1544                           	global	__size_of_StartTickTimer
  1545                           	__size_of_StartTickTimer	equ	__end_of_StartTickTimer-_StartTickTimer
  1546  0016                     	
  1547                           _StartTickTimer:	
  1548  00FE                     ;incstack = 0
  1549                           	opt	stack 4
  1550                           ; Regs used in _StartTickTimer: [wreg+status,2+status,0+pclath+cstack]
  1551                           	line	27
  1552                           	
  1553                           i1l906:	
  1554  00FE                     ;user.c: 27:     T1CONbits.TMR1ON = 0;
  1555                           	bcf	status, 5	;RP0=0, select bank0
  1556  00FE  1283               	bcf	(16),0	;volatile
  1557  00FF  1010               	line	29
  1558                           ;user.c: 29:     PIR1bits.TMR1IF = 0;
  1559                           	bcf	(12),0	;volatile
  1560  0100  100C               	line	31
  1561                           	
  1562                           i1l908:	
  1563  0101                     ;user.c: 31:     TMR1H = 0x3C;
  1564                           	movlw	low(03Ch)
  1565  0101  303C               	movwf	(15)	;volatile
  1566  0102  008F               	line	32
  1567                           ;user.c: 32:     TMR1L = 0xB0;
  1568                           	movlw	low(0B0h)
  1569  0103  30B0               	movwf	(14)	;volatile
  1570  0104  008E               	line	34
  1571                           	
  1572                           i1l910:	
  1573  0105                     ;user.c: 34:     T1CONbits.TMR1ON = 1;
  1574                           	bsf	(16),0	;volatile
  1575  0105  1410               	line	38
  1576                           	
  1577                           i1l912:	
  1578  0106                     ;user.c: 38:     if (++EdgeDetect >= 2)
  1579                           	movlw	low(01h)
  1580  0106  3001               	movwf	(??_StartTickTimer+0)+0
  1581  0107  00AE               	movf	(??_StartTickTimer+0)+0,w
  1582  0108  082E               	addwf	(_EdgeDetect),f
  1583  0109  07A1               	movlw	low(02h)
  1584  010A  3002               	subwf	((_EdgeDetect)),w
  1585  010B  0221               	skipc
  1586  010C  1C03               	goto	u17_21
  1587  010D  290F               	goto	u17_20
  1588  010E  2910               u17_21:
  1589  010F                     	goto	i1l113
  1590  010F  2913               u17_20:
  1591  0110                     	line	39
  1592                           	
  1593                           i1l914:	
  1594  0110                     ;user.c: 39:         BitDataInit( 0);
  1595                           	movlw	low(0)
  1596  0110  3000               	fcall	_BitDataInit
  1597  0111  20E3               	goto	i1l113
  1598  0112  2913               	
  1599                           i1l112:	
  1600  0113                     	line	40
  1601                           	
  1602                           i1l113:	
  1603  0113                     	return
  1604  0113  0008               	opt stack 0
  1605                           GLOBAL	__end_of_StartTickTimer
  1606                           	__end_of_StartTickTimer:
  1607  0114                     	signat	_StartTickTimer,89
  1608                           	global	_BitDataInit
  1609                           
  1610 ;; *************** function _BitDataInit *****************
  1611 ;; Defined at:
  1612 ;;		line 29 in file "main.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;  ModeTx          1    wreg     unsigned char 
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  ModeTx          1    0[BANK0 ] unsigned char 
  1617 ;;  IntEnable       1    1[BANK0 ] unsigned char 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  1    wreg      void 
  1620 ;; Registers used:
  1621 ;;		wreg, status,2, status,0
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMMON   BANK0
  1627 ;;      Params:         0       0
  1628 ;;      Locals:         0       0
  1629 ;;      Temps:          0       0
  1630 ;;      Totals:         0       0
  1631 ;;Total ram usage:        0 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    3
  1634 ;; This function calls:
  1635 ;;		Nothing
  1636 ;; This function is called by:
  1637 ;;		_main
  1638 ;;		_StartTickTimer
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           psect	text4,local,class=CODE,delta=2,merge=1,group=0
  1642                           	file	"main.c"
  1643                           	line	29
  1644                           global __ptext4
  1645                           __ptext4:	;psect for function _BitDataInit
  1646  00E3                     psect	text4
  1647                           	file	"main.c"
  1648                           	line	29
  1649                           	global	__size_of_BitDataInit
  1650                           	__size_of_BitDataInit	equ	__end_of_BitDataInit-_BitDataInit
  1651  001B                     	
  1652                           _BitDataInit:	
  1653  00E3                     ;incstack = 0
  1654                           	opt	stack 1
  1655                           ; Regs used in _BitDataInit: [wreg+status,2+status,0]
  1656                           ;BitDataInit@ModeTx stored from wreg
  1657                           	bcf	status, 5	;RP0=0, select bank0
  1658  00E3  1283               	movwf	(BitDataInit@ModeTx)
  1659  00E4  00AC               	line	32
  1660                           	
  1661                           i1l862:	
  1662  00E5                     ;main.c: 29: };main.c: 30: ;main.c: 32: 
  1663                           	movlw	0
  1664  00E5  3000               	btfsc	(11),7	;volatile
  1665  00E6  1B8B               	movlw	1
  1666  00E7  3001               	movwf	(BitDataInit@IntEnable)
  1667  00E8  00AD               	line	33
  1668                           	
  1669                           i1l864:	
  1670  00E9                     ;main.c: 33: void main(void) {
  1671                           	bcf	(11),7	;volatile
  1672  00E9  138B               	line	35
  1673                           	
  1674                           i1l866:	
  1675  00EA                     ;main.c: 35:     Initialise();
  1676                           		decf	((BitDataInit@ModeTx)),w
  1677  00EA  032C               	btfss	status,2
  1678  00EB  1D03               	goto	u16_21
  1679  00EC  28EE               	goto	u16_20
  1680  00ED  28EF               u16_21:
  1681  00EE                     	goto	i1l35
  1682  00EE  28F2               u16_20:
  1683  00EF                     	line	38
  1684                           	
  1685                           i1l868:	
  1686  00EF                     ;main.c: 36: ;main.c: 38:     BitDataInit( 0);
  1687                           	bcf	(11),4	;volatile
  1688  00EF  120B               	line	41
  1689                           ;main.c: 41:     INTCONbits.GIE = 1;
  1690                           	bsf	(57/8),(57)&7	;volatile
  1691  00F0  1487               	line	42
  1692                           ;main.c: 42: 
  1693                           	goto	i1l874
  1694  00F1  28F8               	line	43
  1695                           ;main.c: 43:     while(1)
  1696                           	
  1697                           i1l35:	
  1698  00F2                     	line	46
  1699                           ;main.c: 44:     {;main.c: 46:         {
  1700                           	bcf	(57/8),(57)&7	;volatile
  1701  00F2  1087               	line	49
  1702                           	
  1703                           i1l870:	
  1704  00F3                     ;main.c: 49: 
  1705                           	clrf	(_DataState)
  1706  00F3  01A3               	line	50
  1707                           ;main.c: 50: 
  1708                           	clrf	(_Addressed)
  1709  00F4  01A2               	line	51
  1710                           ;main.c: 51:             INTCONbits.T0IE = 0;
  1711                           	clrf	(_BitCount)
  1712  00F5  01A8               	line	54
  1713                           	
  1714                           i1l872:	
  1715  00F6                     ;main.c: 54:             INTCONbits.T0IE = 0;
  1716                           	bsf	(11),4	;volatile
  1717  00F6  160B               	goto	i1l874
  1718  00F7  28F8               	line	55
  1719                           ;main.c: 55: 
  1720                           	
  1721                           i1l36:	
  1722  00F8                     	line	58
  1723                           	
  1724                           i1l874:	
  1725  00F8                     ;main.c: 58: 
  1726                           	rrf	(BitDataInit@IntEnable),w
  1727  00F8  0C2D               	skipc
  1728  00F9  1C03               	bcf	(11),7	;volatile
  1729  00FA  138B               	skipnc
  1730  00FB  1803               	bsf	(11),7	;volatile
  1731  00FC  178B               	line	59
  1732                           	
  1733                           i1l37:	
  1734  00FD                     	return
  1735  00FD  0008               	opt stack 0
  1736                           GLOBAL	__end_of_BitDataInit
  1737                           	__end_of_BitDataInit:
  1738  00FE                     	signat	_BitDataInit,4217
  1739                           	global	_SendModule
  1740                           
  1741 ;; *************** function _SendModule *****************
  1742 ;; Defined at:
  1743 ;;		line 79 in file "user.c"
  1744 ;; Parameters:    Size  Location     Type
  1745 ;;		None
  1746 ;; Auto vars:     Size  Location     Type
  1747 ;;		None
  1748 ;; Return value:  Size  Location     Type
  1749 ;;                  1    wreg      void 
  1750 ;; Registers used:
  1751 ;;		None
  1752 ;; Tracked objects:
  1753 ;;		On entry : 0/0
  1754 ;;		On exit  : 0/0
  1755 ;;		Unchanged: 0/0
  1756 ;; Data sizes:     COMMON   BANK0
  1757 ;;      Params:         0       0
  1758 ;;      Locals:         0       0
  1759 ;;      Temps:          0       0
  1760 ;;      Totals:         0       0
  1761 ;;Total ram usage:        0 bytes
  1762 ;; Hardware stack levels used:    1
  1763 ;; This function calls:
  1764 ;;		Nothing
  1765 ;; This function is called by:
  1766 ;;		_ISR
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           psect	text5,local,class=CODE,delta=2,merge=1,group=0
  1770                           	file	"user.c"
  1771                           	line	79
  1772                           global __ptext5
  1773                           __ptext5:	;psect for function _SendModule
  1774  0137                     psect	text5
  1775                           	file	"user.c"
  1776                           	line	79
  1777                           	global	__size_of_SendModule
  1778                           	__size_of_SendModule	equ	__end_of_SendModule-_SendModule
  1779  0001                     	
  1780                           _SendModule:	
  1781  0137                     ;incstack = 0
  1782                           	opt	stack 5
  1783                           ; Regs used in _SendModule: []
  1784                           	line	82
  1785                           	
  1786                           i1l123:	
  1787  0137                     	return
  1788  0137  0008               	opt stack 0
  1789                           GLOBAL	__end_of_SendModule
  1790                           	__end_of_SendModule:
  1791  0138                     	signat	_SendModule,89
  1792                           	global	_EdgeIntr
  1793                           
  1794 ;; *************** function _EdgeIntr *****************
  1795 ;; Defined at:
  1796 ;;		line 44 in file "user.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;		None
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;		None
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  1    wreg      void 
  1803 ;; Registers used:
  1804 ;;		wreg, status,2
  1805 ;; Tracked objects:
  1806 ;;		On entry : 0/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMMON   BANK0
  1810 ;;      Params:         0       0
  1811 ;;      Locals:         0       0
  1812 ;;      Temps:          0       0
  1813 ;;      Totals:         0       0
  1814 ;;Total ram usage:        0 bytes
  1815 ;; Hardware stack levels used:    1
  1816 ;; This function calls:
  1817 ;;		Nothing
  1818 ;; This function is called by:
  1819 ;;		_ISR
  1820 ;; This function uses a non-reentrant model
  1821 ;;
  1822                           psect	text6,local,class=CODE,delta=2,merge=1,group=0
  1823                           	line	44
  1824                           global __ptext6
  1825                           __ptext6:	;psect for function _EdgeIntr
  1826  0130                     psect	text6
  1827                           	file	"user.c"
  1828                           	line	44
  1829                           	global	__size_of_EdgeIntr
  1830                           	__size_of_EdgeIntr	equ	__end_of_EdgeIntr-_EdgeIntr
  1831  0007                     	
  1832                           _EdgeIntr:	
  1833  0130                     ;incstack = 0
  1834                           	opt	stack 5
  1835                           ; Regs used in _EdgeIntr: [wreg+status,2]
  1836                           	line	50
  1837                           	
  1838                           i1l916:	
  1839  0130                     ;user.c: 50:     EdgeDetect = 0;
  1840                           	bcf	status, 5	;RP0=0, select bank0
  1841  0130  1283               	clrf	(_EdgeDetect)
  1842  0131  01A1               	line	53
  1843                           	
  1844                           i1l918:	
  1845  0132                     ;user.c: 53:     TMR0 = 175;
  1846                           	movlw	low(0AFh)
  1847  0132  30AF               	movwf	(1)	;volatile
  1848  0133  0081               	line	55
  1849                           	
  1850                           i1l920:	
  1851  0134                     ;user.c: 55:     INTCONbits.T0IF = 0;
  1852                           	bcf	(11),2	;volatile
  1853  0134  110B               	line	56
  1854                           	
  1855                           i1l922:	
  1856  0135                     ;user.c: 56:     INTCONbits.T0IE = 1;
  1857                           	bsf	(11),5	;volatile
  1858  0135  168B               	line	57
  1859                           	
  1860                           i1l116:	
  1861  0136                     	return
  1862  0136  0008               	opt stack 0
  1863                           GLOBAL	__end_of_EdgeIntr
  1864                           	__end_of_EdgeIntr:
  1865  0137                     	signat	_EdgeIntr,89
  1866                           	global	_BitIntr
  1867                           
  1868 ;; *************** function _BitIntr *****************
  1869 ;; Defined at:
  1870 ;;		line 62 in file "user.c"
  1871 ;; Parameters:    Size  Location     Type
  1872 ;;		None
  1873 ;; Auto vars:     Size  Location     Type
  1874 ;;		None
  1875 ;; Return value:  Size  Location     Type
  1876 ;;                  1    wreg      void 
  1877 ;; Registers used:
  1878 ;;		wreg
  1879 ;; Tracked objects:
  1880 ;;		On entry : 0/0
  1881 ;;		On exit  : 0/0
  1882 ;;		Unchanged: 0/0
  1883 ;; Data sizes:     COMMON   BANK0
  1884 ;;      Params:         0       0
  1885 ;;      Locals:         0       0
  1886 ;;      Temps:          0       0
  1887 ;;      Totals:         0       0
  1888 ;;Total ram usage:        0 bytes
  1889 ;; Hardware stack levels used:    1
  1890 ;; This function calls:
  1891 ;;		Nothing
  1892 ;; This function is called by:
  1893 ;;		_ISR
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           psect	text7,local,class=CODE,delta=2,merge=1,group=0
  1897                           	line	62
  1898                           global __ptext7
  1899                           __ptext7:	;psect for function _BitIntr
  1900  0114                     psect	text7
  1901                           	file	"user.c"
  1902                           	line	62
  1903                           	global	__size_of_BitIntr
  1904                           	__size_of_BitIntr	equ	__end_of_BitIntr-_BitIntr
  1905  000D                     	
  1906                           _BitIntr:	
  1907  0114                     ;incstack = 0
  1908                           	opt	stack 5
  1909                           ; Regs used in _BitIntr: [wreg]
  1910                           	line	65
  1911                           	
  1912                           i1l1014:	
  1913  0114                     ;user.c: 65:     RC3=1;
  1914                           	bcf	status, 5	;RP0=0, select bank0
  1915  0114  1283               	bsf	(59/8),(59)&7	;volatile
  1916  0115  1587               	line	66
  1917                           ;user.c: 66:     RC3=0;
  1918                           	bcf	(59/8),(59)&7	;volatile
  1919  0116  1187               	line	69
  1920                           	
  1921                           i1l1016:	
  1922  0117                     ;user.c: 69:     IntrData <<= 1;
  1923                           	clrc
  1924  0117  1003               	rlf	(_IntrData),f
  1925  0118  0DA9               
  1926                           	line	70
  1927                           	
  1928                           i1l1018:	
  1929  0119                     ;user.c: 70:     if (RA2==1)
  1930                           	btfss	(42/8),(42)&7	;volatile
  1931  0119  1D05               	goto	u34_21
  1932  011A  291C               	goto	u34_20
  1933  011B  291D               u34_21:
  1934  011C                     	goto	i1l119
  1935  011C  291E               u34_20:
  1936  011D                     	line	71
  1937                           	
  1938                           i1l1020:	
  1939  011D                     ;user.c: 71:         IntrData |= 1;
  1940                           	bsf	(_IntrData)+(0/8),(0)&7
  1941  011D  1429               	
  1942                           i1l119:	
  1943  011E                     	line	74
  1944                           ;user.c: 74:     IntrNewBit = 1;
  1945                           	clrf	(_IntrNewBit)
  1946  011E  01AB               	incf	(_IntrNewBit),f
  1947  011F  0AAB               	line	75
  1948                           	
  1949                           i1l120:	
  1950  0120                     	return
  1951  0120  0008               	opt stack 0
  1952                           GLOBAL	__end_of_BitIntr
  1953                           	__end_of_BitIntr:
  1954  0121                     	signat	_BitIntr,89
  1955                           global	___latbits
  1956                           ___latbits	equ	0
  1957  0000                     	global	btemp
  1958                           	btemp set 05Eh
  1959  005E                     
  1960                           	DABS	1,94,2	;btemp
  1961                           	global	wtemp0
  1962                           	wtemp0 set btemp+0
  1963  005E                     	end


Data Sizes:
    Strings     0
    Constant    1
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      7      19

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_StartTickTimer

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0      45
                                              6 BANK0      1     1      0
                        _BitDataInit
                         _Initialise
 ---------------------------------------------------------------------------------
 (1) _Initialise                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _BitDataInit                                          2     2      0      45
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0      45
                                              3 BANK0      3     3      0
                            _BitIntr
                           _EdgeIntr
                         _SendModule
                     _StartTickTimer
 ---------------------------------------------------------------------------------
 (3) _StartTickTimer                                       1     1      0      45
                                              2 BANK0      1     1      0
                        _BitDataInit
 ---------------------------------------------------------------------------------
 (4) _BitDataInit                                          2     2      0      45
 ---------------------------------------------------------------------------------
 (3) _SendModule                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EdgeIntr                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _BitIntr                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BitDataInit
   _Initialise

 _ISR (ROOT)
   _BitIntr
   _EdgeIntr
   _SendModule
   _StartTickTimer
     _BitDataInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      7      13       4       30.6%
ABS                  0      0      13       5        0.0%
DATA                 0      0      13       6        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Oct 29 15:22:22 2018

                      pc 0002              __CFG_CP$OFF 0000                       l50 005C  
                     l42 0018                       l43 0098                       l51 0096  
                     l60 009A                       l52 007A                       l44 0040  
                     l53 0079                       l45 003F                       l46 0097  
                     l54 0095                       l55 0094                       l47 0062  
                     l56 0089                       l48 0061                       l57 0091  
                     l49 005A                       l58 0099                       l83 00E2  
                     l59 009A                       fsr 0004                      l900 00DE  
                    l902 00DF                      l904 00E1                      l940 001F  
                    l932 0013                      l950 002E                      l942 0023  
                    l934 0016                      l880 00CE                      l960 0045  
                    l952 0030                      l944 0024                      l936 0018  
                    l890 00D5                      l882 00CF                      l970 005C  
                    l962 004B                      l954 0039                      l946 0025  
                    l938 001E                      l892 00D7                      l884 00D1  
                    l876 00C7                      l980 007A                      l964 004C  
                    l972 0062                      l956 003B                      l948 0029  
                    l894 00D9                      l886 00D3                      l878 00CD  
                    l982 0080                      l974 0068                      l966 0057  
                    l958 0040                      l896 00DA                      l888 00D4  
                    l984 0085                      l976 006E                      l968 005A  
                    l898 00DC                      l986 008F                      l978 006F  
                    l988 0091                      _RA2 002A                      _RC1 0039  
                    _RC3 003B                      _RC4 003C                      _RC5 003D  
                    u200 002E                      u201 002D                      u210 0039  
                    u211 0038                      u220 0045                      u221 0044  
                    u230 004B                      u231 004A                      u240 0057  
                    u241 0056                      u250 0068                      u251 0067  
                    u260 006E                      u261 006D                      u270 0080  
                    u190 001E                      u271 007F                      u191 001D  
                    u280 0085                      u281 0084                      u290 008F  
           __CFG_CPD$OFF 0000                      u291 008E                      _ISR 009B  
                    fsr0 0004                      indf 0000             __CFG_FOSC$EC 0000  
             _EdgeDetect 0021                     ?_ISR 002C                     i1l35 00F2  
                   i1l36 00F8                     i1l37 00FD                     _TMR0 0001  
                   _Sync 0027                     _main 0013                     btemp 005E  
                   start 000B          __end_of_BitIntr 0121              _BitDataInit 00E3  
                  ??_ISR 002F                    ?_main 002C            __CFG_WDTE$OFF 0000  
                  _CMCON 0019                    i1l120 0120                    i1l112 0113  
                  i1l113 0113                    i1l123 0137                    i1l116 0136  
                  i1l142 00B1                    i1l119 011E                    i1l143 00AA  
                  i1l144 00B0                    i1l145 00B8                    i1l146 00BF  
                  i1l147 00BF                    i1l910 0105                    i1l920 0134  
                  i1l912 0106                    i1l922 0135                    i1l914 0110  
                  i1l906 00FE                    i1l916 0130                    i1l908 0101  
                  i1l918 0132                    i1l870 00F3                    i1l862 00E5  
                  i1l872 00F6                    i1l864 00E9                    i1l874 00F8  
                  i1l866 00EA                    i1l868 00EF                    u16_20 00EF  
                  u16_21 00EE                    u17_20 0110                    u17_21 010F  
                  _TMR1H 000F                    _TMR1L 000E                    u34_20 011D  
                  u34_21 011C                    u35_20 009F                    u35_21 009E  
                  u36_20 00A7                    u36_21 00A6                    u37_20 00B5  
                  u37_21 00B4                    u38_20 00BC                    u38_21 00BB  
                  _TRISA 0085                    _TRISC 0087                    _Lamps 0024  
         __CFG_BOREN$OFF 0000                    pclath 000A                    status 0003  
       __end_of_EdgeIntr 0137                    wtemp0 005E           __CFG_MCLRE$OFF 0000  
        __initialization 000C             __end_of_main 009B               _Initialise 00C7  
             _IntrNewBit 002B                   ??_main 0032               _SendModule 0137  
                 i1l1020 011D                   i1l1014 0114                   i1l1030 00A8  
                 i1l1022 009B                   i1l1016 0117                   i1l1040 00B8  
                 i1l1032 00AA                   i1l1024 009F                   i1l1018 0119  
                 i1l1042 00BC                   i1l1026 00A0                   i1l1034 00B1  
                 i1l1044 00BD                   i1l1036 00B5                   i1l1028 00A7  
                 i1l1038 00B6                ??_BitIntr 0000         ??_StartTickTimer 002E  
         __CFG_PWRTE$OFF 0000                   _RxData 002A                   saved_w 005E  
__end_of__initialization 0011           __pcstackCOMMON 0000              ?_Initialise 002C  
              ?_EdgeIntr 002C           _OPTION_REGbits 0081        BitDataInit@ModeTx 002C  
            ?_SendModule 002C               __pbssBANK0 0020               __pmaintext 0013  
           ?_BitDataInit 002C               __pintentry 0004               ??_EdgeIntr 0000  
             __stringtab 0129                  _Address 0026                  _BitIntr 0114  
    __size_of_Initialise 001C                  _BoxSize 0025      __size_of_SendModule 0001  
                __ptext1 00C7                  __ptext2 009B                  __ptext3 00FE  
                __ptext4 00E3                  __ptext5 0137                  __ptext6 0130  
                __ptext7 0114     BitDataInit@IntEnable 002D             __size_of_ISR 002C  
              _T1CONbits 0010                  clrloop0 0122     end_of_initialization 0011  
              _Addressed 0022                _DataState 0023             ??_Initialise 0000  
   __size_of_BitDataInit 001B      start_initialization 000C              __end_of_ISR 00C7  
      __size_of_EdgeIntr 0007             ??_SendModule 0000       __end_of_Initialise 00E3  
              _TickCount 0020      __end_of_BOX_ADDRESS 0130  __size_of_StartTickTimer 0016  
     __end_of_SendModule 0138                ___latbits 0000            __pcstackBANK0 002C  
               ?_BitIntr 002C                __pstrings 0129        interrupt_function 0004  
            _BOX_ADDRESS 012F                clear_ram0 0121                 _PIE1bits 008C  
               _PIR1bits 000C              __stringbase 012E                 _EdgeIntr 0130  
               _BitCount 0028         __size_of_BitIntr 000D                 _IntrData 0029  
         _StartTickTimer 00FE       __end_of__stringtab 012F            __size_of_main 0088  
 __end_of_StartTickTimer 0114            ??_BitDataInit 0000               _INTCONbits 000B  
               intlevel1 0000                stringcode 0129          ?_StartTickTimer 002C  
    __end_of_BitDataInit 00FE                 stringdir 0129                 stringtab 0129  
